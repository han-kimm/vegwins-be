{
  "src/app/auth/google/page.tsx": "'use client';\n\nimport { PREVIOUS_PATH } from '@/constants/default';\nimport { getLocalStorage } from '@/utils/browserStorage';\nimport { setCookie, setTokenCookie } from '@/utils/cookie';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { Suspense, useEffect } from 'react';\nimport toast from 'react-hot-toast';\nimport FadingDot from '@/components/common/FadingDot';\nimport IconGoogle from 'public/icon/google.svg';\nimport IconLogo from 'public/icon/logo.svg';\n\nconst GoogleAuthPage = () => {\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  useEffect(() => {\n    (async () => {\n      try {\n        const code = searchParams.get('code');\n        const { accessToken, refreshToken, nickname } = await fetch(process.env.NEXT_PUBLIC_BASE_URL + '/auth/google', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({ code }),\n        }).then((resp) => resp.json());\n        if (nickname) {\n          toast.success(`${nickname}님 안녕하세요!`);\n          await setTokenCookie(accessToken, refreshToken);\n          await setCookie({ name: 'v_s', value: { nickname }, path: '/' });\n        }\n      } catch (e) {\n        console.error(e);\n        toast.error('다시 시도해 주십시오.');\n      } finally {\n        const previousPath = getLocalStorage(PREVIOUS_PATH);\n        if (previousPath) {\n          router.push(previousPath);\n          localStorage.clear();\n          return;\n        }\n        router.push('/');\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"flex-center h-dvh w-full\">\n      <div className=\"flex-center gap-16\">\n        <IconGoogle />\n        <FadingDot />\n        <IconLogo />\n      </div>\n    </div>\n  );\n};\n\nconst SuspendedPage = () => {\n  return (\n    <Suspense>\n      <GoogleAuthPage />\n    </Suspense>\n  );\n};\n\nexport default SuspendedPage;\n",
  "src/app/error.tsx": "'use client';\n\nimport { useRouter } from 'next/navigation';\n\nconst Error = () => {\n  const router = useRouter();\n  return (\n    <div className=\"flex-center h-dvh text-18\">\n      <button onClick={() => router.back()}>뒤로가기</button>\n    </div>\n  );\n};\nexport default Error;\n",
  "src/app/layout.tsx": "import type { Metadata, Viewport } from 'next';\nimport localFont from 'next/font/local';\nimport { Toaster } from 'react-hot-toast';\nimport './globals.css';\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"ko\">\n      <body className={NotoSansKR.className}>\n        {children}\n        <div id=\"modal\" />\n        <Toaster toastOptions={toasterOptions} />\n      </body>\n    </html>\n  );\n}\n\nconst NotoSansKR = localFont({\n  src: [\n    { path: '../../public/font/NotoSans_regular_sub.woff2', weight: '400', style: 'normal' },\n    { path: '../../public/font/NotoSans_medium_sub.woff2', weight: '500', style: 'normal' },\n    { path: '../../public/font/NotoSans_bold_sub.woff2', weight: '700', style: 'normal' },\n  ],\n});\n\nconst toasterOptions = {\n  className: 'text-16 font-medium',\n};\n\nconst APP_NAME = '비긴즈';\nconst APP_DEFAULT_TITLE = '비긴즈 | vegwins';\nconst APP_TITLE_TEMPLATE = '%s | 비긴즈';\nconst APP_DESCRIPTION = '함께 나아가는 비긴즈, vegwins';\n\nconst IconSizes = [512];\n\nexport const metadata: Metadata = {\n  applicationName: APP_NAME,\n  title: {\n    default: APP_DEFAULT_TITLE,\n    template: APP_TITLE_TEMPLATE,\n  },\n  description: APP_DESCRIPTION,\n  icons: [\n    ...IconSizes.map((size) => ({ rel: 'icon', url: `icon-${size}x${size}.png`, sizes: `${size}x${size}` })),\n    ...IconSizes.map((size) => ({ rel: 'apple-touch-icon', url: `icon-${size}x${size}.png`, sizes: `${size}x${size}` })),\n  ],\n  manifest: '/manifest.webmanifest',\n  appleWebApp: {\n    capable: true,\n    statusBarStyle: 'default',\n    title: APP_DEFAULT_TITLE,\n    // startUpImage: [],\n  },\n  formatDetection: {\n    telephone: false,\n  },\n  openGraph: {\n    type: 'website',\n    siteName: APP_NAME,\n    title: {\n      default: APP_DEFAULT_TITLE,\n      template: APP_TITLE_TEMPLATE,\n    },\n    description: APP_DESCRIPTION,\n  },\n  twitter: {\n    card: 'summary',\n    title: {\n      default: APP_DEFAULT_TITLE,\n      template: APP_TITLE_TEMPLATE,\n    },\n    description: APP_DESCRIPTION,\n  },\n};\n\nexport const viewport: Viewport = {\n  themeColor: '#3b3838',\n};\n",
  "src/app/not-found.tsx": "'use client';\n\nimport { useRouter } from 'next/navigation';\n\nconst NotFound = () => {\n  const router = useRouter();\n  return (\n    <div className=\"flex-center h-dvh text-18\">\n      <button onClick={() => router.back()}>뒤로가기</button>\n    </div>\n  );\n};\nexport default NotFound;\n",
  "src/app/page.tsx": "import { getData } from '@/utils/fetching';\nimport Footer from '@/components/home_footer/Footer';\nimport AuthChecker from '@/components/home_header/AuthChecker';\nimport Carousel from '@/components/home_main/Carousel';\nimport LinkCategory from '@/components/home_main/LinkCategory';\nimport LinkSearch from '@/components/home_main/LinkSearch';\nimport LinkWrite from '@/components/home_main/LinkWrite';\n\nconst Home = async () => {\n  const carousels = await getData({ path: '/carousel' });\n  return (\n    <>\n      <meta property=\"og:image\" content=\"og-thumbnail.webp\" />\n      <div className=\"max-h-max min-h-dvh\">\n        <header className=\"flex h-60 w-full items-center justify-end gap-60 px-40 py-20\">\n          <AuthChecker />\n        </header>\n        <main className=\"flex-center mb-100 flex-col gap-28\">\n          <Carousel data={carousels} />\n          <LinkSearch />\n          <LinkCategory />\n          <LinkWrite />\n        </main>\n        <footer className=\"mt-auto bg-black-80 px-40 py-12 text-14 text-white\">\n          <Footer />\n        </footer>\n      </div>\n    </>\n  );\n};\nexport default Home;\n",
  "src/app/paper/[paperId]/edit/page.tsx": "import { SubmitData } from '@/constants/default';\nimport { Paper } from '@/types/data';\nimport { getData } from '@/utils/fetching';\nimport ButtonReturn from '@/components/common/ButtonReturn';\nimport ButtonDeletePaper from '@/components/edit/ButtonDeletePaper';\nimport WriteForm from '@/components/write_main/WriteForm';\n\nexport const dynamic = 'force-static';\ninterface Props {\n  params: { paperId: string };\n}\nconst EditPage = async ({ params }: Props) => {\n  const { paperId } = params;\n  const data: Paper = await getData({ path: `/paper/${paperId}`, queryKey: [paperId] });\n  const initial: SubmitData = {\n    title: data.title,\n    category: data.category,\n    description: data.description,\n    hashtag: data.hashtag ?? [],\n    image: data.imageUrl ?? [],\n  };\n  return (\n    <div className=\"max-h-max min-h-dvh px-28 pb-28 pt-16\">\n      <header className=\"mb-12 flex justify-between\">\n        <ButtonDeletePaper title={data.title} paperId={paperId} />\n        <ButtonReturn text=\"취소하기\" icon=\"cancel\" reverse />\n      </header>\n      <main className=\"h-full w-full\">\n        <WriteForm initial={initial} paperId={paperId} />\n      </main>\n    </div>\n  );\n};\nexport default EditPage;\n",
  "src/app/paper/[paperId]/page.tsx": "import { Paper } from '@/types/data';\nimport { getCookie } from '@/utils/cookie';\nimport { getData, getSSR } from '@/utils/fetching';\nimport ButtonReturn from '@/components/common/ButtonReturn';\nimport LiftingButton from '@/components/common/LiftingButton';\nimport LinkHome from '@/components/common/LinkHome';\nimport MetaTag from '@/components/common/MetaTag';\nimport Information from '@/components/paper_main/Information';\nimport MyRating from '@/components/paper_main/MyRating';\nimport Share from '@/components/paper_main/Share';\nimport Users from '@/components/paper_main/Users';\n\ninterface Props {\n  params: { paperId: string };\n}\n\nconst PaperPage = async ({ params }: Props) => {\n  const { paperId } = params;\n  const paperData: Paper = await getData({ path: `/paper/${paperId}`, queryKey: [paperId] });\n  const session = await getCookie('v_s');\n  let initialRating;\n  if (session) {\n    initialRating = await getSSR({ path: `/paper/${paperId}/rating`, queryKey: [`${paperId}/rating`] });\n  }\n  return (\n    <>\n      <MetaTag\n        title={paperData.title}\n        description={`${paperData.category?.reduce((acc, cur) => (acc ? acc + ', ' + cur : acc + cur), '') ?? '비긴즈'}에서 발견할 수 있는 ${paperData.title}`}\n        imageUrl={paperData.imageUrl[0]}\n      />\n      <div className=\"max-h-max min-h-dvh px-16 pb-28 pt-16\">\n        <header className=\"mb-12 flex justify-between\">\n          <ButtonReturn recallPath text=\"검색 결과로 돌아가기\" icon=\"arrow-left\" />\n          <LinkHome isPaper />\n        </header>\n        <main className=\"flex flex-grow animate-fadeIn flex-col gap-24\">\n          <Information data={paperData} />\n          <div className=\"flex gap-20\">\n            <MyRating initialRating={initialRating?.rating} paperRating={paperData.rating} paperId={paperId} />\n            <Share />\n          </div>\n          <Users data={paperData} />\n        </main>\n        <LiftingButton />\n      </div>\n    </>\n  );\n};\nexport default PaperPage;\n",
  "src/app/privatePolicy/page.tsx": "import ButtonReturn from '@/components/common/ButtonReturn';\n\nconst PrviatePolicy = () => {\n  return (\n    <div className=\"max-h-max min-h-dvh px-16 pb-28 pt-16\">\n      <ButtonReturn icon=\"arrow-left\" text=\"홈페이지로 돌아가기\" />\n      <div className=\"my-20 rounded-md bg-white p-24 shadow-md\">\n        <h1 className=\"mb-20 text-20 font-bold\">비긴즈 개인정보처리방침</h1>\n        <p className=\"text-16 font-medium\">\n          1. 수집하는 개인정보 항목\n          <br />\n          비긴즈(vegwins)는 회원가입 및 서비스 이용을 위해 아래와 같은 개인정보를 수집하고 있습니다.\n          <br />\n          <span className=\"font-normal\">\n            1. 서비스 이용기록 2. 접속 로그 3. 쿠키\n            <br /> 개인정보 수집방법 : 홈페이지(회원가입, 게시판)\n          </span>\n          <br />\n          <br />\n          2. 개인정보의 수집 및 이용목적\n          <br />\n          비긴즈는 수집한 개인정보를 다음의 목적을 위해 활용합니다.\n          <br />\n          <span className=\"font-normal\">\n            1. 회원 관리회원제 서비스 이용에 따른 본인확인 : 개인 식별 , 불량회원의 부정 이용 방지와 비인가 사용 방지 , 가입 의사 확인\n            <br />\n            <br /> 2. 마케팅 및 광고에 활용: 접속 빈도 파악 또는 회원의 서비스 이용에 대한 통계\n          </span>\n          <br />\n          <br />\n          3. 개인정보의 보유 및 이용기간\n          <br />\n          원칙적으로, 개인정보 수집 및 이용목적이 달성된 후에는 해당 정보를 지체 없이 파기합니다. 단, 관계법령의 규정에 의하여 보존할 필요가 있는 경우\n          비긴즈는 아래와 같이 관계법령에서 정한 일정한 기간 동안 회원정보를 보관합니다.\n          <br />\n          <span className=\"font-normal\">\n            1. 보존 항목 : 로그인ID\n            <br />\n            2. 보존 근거 : 신용정보의 이용 및 보호에 관한 법률\n            <br />\n            3. 보존 기간 : 3년 표시/광고에 관한 기록 : 6개월 (전자상거래등에서의 소비자보호에 관한 법률) 계약 또는 청약철회 등에 관한 기록 : 5년\n            (전자상거래등에서의 소비자보호에 관한 법률) 대금결제 및 재화 등의 공급에 관한 기록 : 5년 (전자상거래등에서의 소비자보호에 관한 법률)\n            소비자의 불만 또는 분쟁처리에 관한 기록 : 3년 (전자상거래등에서의 소비자보호에 관한 법률) 신용정보의 수집/처리 및 이용 등에 관한 기록 :\n            3년 (신용정보의 이용 및 보호에 관한 법률)\n          </span>\n          <br />\n          <br />\n          4. 개인정보의 파기절차 및 방법\n          <br />\n          비긴즈는 원칙적으로 개인정보 수집 및 이용목적이 달성된 후에는 해당 정보를 지체없이 파기합니다. 파기절차 및 방법은 다음과 같습니다.\n          <br />\n          <span className=\"font-normal\">\n            1. 파기절차\n            <br />\n            회원님이 회원가입 등을 위해 입력하신 정보는 목적이 달성된 후 별도의 DB로 옮겨져(종이의 경우 별도의 서류함) 내부 방침 및 기타 관련 법령에\n            의한 정보보호 사유에 따라(보유 및 이용기간 참조) 일정 기간 저장된 후 파기되어집니다.별도 DB로 옮겨진 개인정보는 법률에 의한 경우가\n            아니고서는 보유되어지는 이외의 다른 목적으로 이용되지 않습니다.\n            <br />\n            2. 파기방법\n            <br />\n            전자적 파일형태로 저장된 개인정보는 기록을 재생할 수 없는 기술적 방법을 사용하여 삭제합니다.\n          </span>\n          <br />\n          <br />\n          5. 개인정보 제공\n          <br />\n          비긴즈는 이용자님의 개인정보를 원칙적으로 외부에 제공하지 않습니다. 다만, 아래의 경우에는 예외로 합니다.\n          <br />\n          <span className=\"font-normal\">\n            1. 이용자님이 사전에 동의한 경우 2. 법령의 규정에 의거하거나, 수사 목적으로 법령에 정해진 절차와 방법에 따라 수사기관의 요구가 있는 경우\n          </span>\n          <br />\n          <br />\n          6. 수집한 개인정보의 위탁\n          <br /> 비긴즈는 이용자님의 동의없이 이용자님의 정보를 외부 업체에 위탁하지 않습니다. 향후 그러한 필요가 생길 경우, 위탁 대상자와 위탁 업무\n          내용에 대해 이용자님께 통지하고 필요한 경우 사전 동의를 받도록 하겠습니다. <br />\n          <br />\n          7. 이용자 및 법정대리인의 권리와 그 행사방법\n          <br /> 이용자는 언제든지 등록되어 있는 자신의 개인정보를 조회하거나 수정할 수 있으며 가입해지를 요청할 수도 있습니다. 이용자들의 개인정보\n          조회,수정을 위해서는 ‘개인정보변경’(또는 ‘회원정보수정’ 등)을 가입해지(동의철회)를 위해서는 “회원탈퇴”를 클릭하여 본인 확인 절차를 거치신 후\n          직접 열람, 정정 또는 탈퇴가 가능합니다. 혹은 개인정보관리책임자에게 서면 또는 이메일로 연락하시면 지체없이 조치하겠습니다. 귀하가 개인정보의\n          오류에 대한 정정을 요청하신 경우에는 정정을 완료하기 전까지 당해 개인정보를 이용 또는 제공하지 않습니다. 또한 잘못된 개인정보를 제3자에게\n          이미 제공한 경우에는 정정 처리결과를 제3자에게 지체없이 통지하여 정정이 이루어지도록 하겠습니다. 비긴즈는 이용자의 요청에 의해 해지 또는\n          삭제된 개인정보는 “비긴즈가 수집하는 개인정보의 보유 및 이용기간”에 명시된 바에 따라 처리하고 그 외의 용도로 열람 또는 이용할 수 없도록\n          처리하고 있습니다.\n          <br />\n          <br />\n          8. 개인정보 자동수집 장치의 설치, 운영 및 그 거부에 관한 사항\n          <br />\n          비긴즈는 귀하의 정보를 수시로 저장하고 찾아내는 ‘쿠키(cookie)’ 등을 운용합니다. 쿠키란 비긴즈의 홈페이지를 운영하는데 이용되는 서버가 귀하의\n          브라우저에 보내는 아주 작은 텍스트 파일로서 귀하의 컴퓨터 하드디스크에 저장됩니다. 비긴즈는 다음과 같은 목적을 위해 쿠키를 사용합니다. 1.\n          쿠키 등 사용 목적회원과 비회원의 접속 빈도나 방문 시간 등을 분석, 이용자의 취향과 관심분야를 파악 및 자취 추적, 각종 이벤트 참여 정도 및\n          방문 회수 파악 등을 통한 타겟 마케팅 및 개인 맞춤 서비스 제공이용자는 쿠키 설치에 대한 선택권을 가지고 있습니다. 따라서, 이용자께서는\n          웹브라우저에서 옵션을 설정함으로써 모든 쿠키를 허용하거나, 쿠키가 저장될 때마다 확인을 거치거나, 아니면 모든 쿠키의 저장을 거부할 수도\n          있습니다.2. 쿠키 설정 거부 방법예: 쿠키 설정을 거부하는 방법으로는 이용자님이 사용하시는 웹 브라우저의 옵션을 선택함으로써 모든 쿠키를\n          허용하거나 쿠키를 저장할 때마다 확인을 거치거나, 모든 쿠키의 저장을 거부할 수 있습니다.설정방법 예(인터넷 익스플로어의 경우) : 웹 브라우저\n          상단의 도구 &gt; 인터넷 옵션 &gt; 개인정보단, 귀하께서 쿠키 설치를 거부하였을 경우 서비스 제공에 어려움이 있을 수 있습니다. <br />\n          <br />\n          9. 개인정보에 관한 민원서비스 <br />\n          비긴즈는 이용자님의 개인정보를 보호하고 개인정보와 관련한 불만을 처리하기 위하여 아래와 같이 개인정보관리책임자를 지정하고 있습니다.\n          개인정보관리책임자 : 이메일 : 귀하께서는 비긴즈의 서비스를 이용하시며 발생하는 모든 개인정보보호 관련 민원을 개인정보관리책임자에게 신고하실\n          수 있습니다. 비긴즈는 이용자들의 신고사항에 대해 신속하게 충분한 답변을 드릴 것입니다. 기타 개인정보침해에 대한 신고나 상담이 필요하신\n          경우에는 아래 기관에 문의하시기 바랍니다.\n          <br />\n          <span className=\"font-normal\">\n            1.개인정보보호 침해센터 ([privacy.kisa.or.kr](http://privacy.kisa.or.kr/kor/main.jsp) / 02-405-5118)\n            <br /> 2.정보보호마크인증위원회 ([www.eprivacy.or.kr](http://www.eprivacy.or.kr/) / 02-580-9531~2)\n            <br /> 3.대검찰청 사이버범죄신고 ([spo.go.kr](http://spo.go.kr/) / 02-3480-2000)\n            <br /> 4.경찰청 사이버안전국 ([www.ctrc.go.kr](http://www.ctrc.go.kr/) / 1566-0112)\n            <br />\n          </span>\n          <br />\n          10. 기타 홈페이지에 링크되어 있는 웹사이트들이 개인정보를 수집하는 개별적인 행위에 대해서는 본 {'개인정보취급방침'}이 적용되지 않음을 알려\n          드립니다. <br />\n          <br />\n          11. 고지의 의무\n          <br />현 개인정보취급방침의 내용이 변경될 경우에는 개정 최소 7일전부터 홈페이지의 {'공지사항'}을 통해 고지 하겠습니다.\n          <br /> - 공고일자 : 2024년 5월 05일\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default PrviatePolicy;\n",
  "src/app/search/page.tsx": "import LiftingButton from '@/components/common/LiftingButton';\nimport LinkHome from '@/components/common/LinkHome';\nimport CategorySelector from '@/components/search_header/CategorySelector';\nimport SearchBar from '@/components/search_header/SearchBar';\nimport SearchResult from '@/components/search_main/SearchResult';\nimport SearchResultView from '@/components/search_main/SearchResultView';\n\nexport const dynamic = 'force-dynamic';\ninterface Props {\n  searchParams: { [key in 'c' | 'k']: string };\n}\nconst Search = ({ searchParams }: Props) => {\n  return (\n    <div className=\"max-h-max min-h-dvh px-16 pb-28 pt-16\">\n      <header className=\"mb-20 flex flex-col gap-8\">\n        <div className=\"flex gap-8\">\n          <SearchBar />\n          <LinkHome />\n        </div>\n        <CategorySelector />\n      </header>\n      <main className=\"flex flex-grow flex-col gap-24\">\n        <SearchResult>\n          <SearchResultView {...searchParams} />\n        </SearchResult>\n      </main>\n      <LiftingButton />\n    </div>\n  );\n};\nexport default Search;\n",
  "src/app/write/page.tsx": "import ButtonReturn from '@/components/common/ButtonReturn';\nimport WriteForm from '@/components/write_main/WriteForm';\n\nconst Write = () => {\n  return (\n    <div className=\"max-h-max min-h-dvh px-28 pb-28 pt-16\">\n      <header className=\"mb-12 flex justify-end\">\n        <ButtonReturn text=\"취소하기\" icon=\"cancel\" reverse />\n      </header>\n      <main className=\"h-full w-full\">\n        <WriteForm />\n      </main>\n    </div>\n  );\n};\nexport default Write;\n",
  "src/components/common/AuthButton.tsx": "'use client';\n\nimport { PREVIOUS_PATH } from '@/constants/default';\nimport { googleAuth } from '@/lib/googleAuth';\nimport { setLocalStorage } from '@/utils/browserStorage';\nimport dynamic from 'next/dynamic';\nimport Image from 'next/image';\nimport { usePathname } from 'next/navigation';\nimport { useState } from 'react';\n\nconst AuthModal = dynamic(() => import('./AuthModal'), { ssr: false });\n\nconst AuthButton = () => {\n  const [open, setOpen] = useState(false);\n  const pathname = usePathname();\n\n  const handleClick = () => {\n    googleAuth();\n    setOpen(true);\n    setLocalStorage({ key: PREVIOUS_PATH, value: pathname });\n  };\n  return (\n    <>\n      <button type=\"button\" onClick={handleClick} className=\"flex-center gap-8 text-16 font-medium\" aria-label=\"구글 계정으로 로그인\">\n        <Image src=\"/icon/join.svg\" alt=\"로그인 이미지\" width={24} height={24} aria-hidden />\n        <span>로그인</span>\n      </button>\n      {open && <AuthModal closeModal={() => setOpen(false)} />}\n    </>\n  );\n};\n\nexport default AuthButton;\n",
  "src/components/common/AuthModal.tsx": "import Link from 'next/link';\nimport ModalFrame from '@/components/common/ModalFrame';\nimport ModalPortal from '@/components/common/ModalPortal';\nimport IconGoogle from 'public/icon/google.svg';\n\ninterface Props {\n  closeModal: () => void;\n}\n\nconst AuthModal = ({ closeModal }: Props) => {\n  return (\n    <ModalPortal>\n      <ModalFrame closeModal={closeModal}>\n        <h2 className=\"mb-20 text-18 font-bold\">로그인</h2>\n        <Link\n          href={makeGoogleURL()}\n          className=\"flex-center transform-active my-auto gap-12 rounded-full border border-black-20 bg-black-0 py-8 text-16 font-medium\"\n        >\n          <IconGoogle />\n          구글 계정으로 로그인\n        </Link>\n        <span className=\"text-12\">\n          구글 계정의 고유식별번호 외<br />\n          <strong>개인 정보는 저장되지 않습니다.</strong>\n        </span>\n      </ModalFrame>\n    </ModalPortal>\n  );\n};\nexport default AuthModal;\n\nconst makeGoogleURL = () => {\n  const endPoint = 'https://accounts.google.com/o/oauth2/v2/auth';\n  const config = {\n    client_id: process.env.NEXT_PUBLIC_ID_GOOGLE ?? '',\n    redirect_uri: process.env.NEXT_PUBLIC_URI_GOOGLE ?? '',\n    response_type: 'code',\n    scope: 'https://www.googleapis.com/auth/userinfo.profile',\n    include_granted_scopes: 'true',\n    state: 'pass-through value',\n  };\n  const configKey = Object.keys(config) as (keyof typeof config)[];\n\n  const params = new URLSearchParams();\n  for (const key of configKey) {\n    params.set(key, config[key]);\n  }\n  const newParams = params.toString();\n  return endPoint + '?' + newParams;\n};\n",
  "src/components/common/AuthSign.tsx": "const AuthSign = () => {\n  return (\n    <div className=\"relative z-0 px-12 text-14 font-bold\">\n      <span>로그인이 필요합니다.</span>\n      <div className=\"absolute bottom-0 left-0 -z-10 h-[0.6rem] w-full bg-orange\" />\n    </div>\n  );\n};\nexport default AuthSign;\n",
  "src/components/common/BottomSheet.tsx": "'use client';\n\nimport { MouseEvent, ReactNode, TouchEvent } from 'react';\nimport IconDown from 'public/icon/arrow-down.svg';\n\ninterface Props {\n  toggleByClick: () => void;\n  children: ReactNode;\n}\nconst BottomSheet = ({ toggleByClick, children }: Props) => {\n  return (\n    <div\n      onClick={toggleByClick}\n      className=\"fixed left-0 top-0 z-20 flex h-dvh w-full max-w-[50rem] animate-slideDown flex-col justify-end max:mx-[calc(50%-25rem)]\"\n    >\n      <div\n        onClick={(e: MouseEvent) => e.stopPropagation()}\n        onTouchEnd={(e: TouchEvent) => e.stopPropagation()}\n        className=\"rounded-t-md bg-white shadow-bt\"\n      >\n        <div className=\"flex justify-between px-16 pt-16\">\n          <div className=\"h-4 w-100 rounded-full bg-black-100\" />\n          <button onClick={toggleByClick} className=\"text-b\" aria-label=\"접어두기\">\n            <IconDown />\n          </button>\n        </div>\n        {children}\n      </div>\n    </div>\n  );\n};\nexport default BottomSheet;\n",
  "src/components/common/ButtonReturn.tsx": "'use client';\n\nimport { PREVIOUS_PATH } from '@/constants/default';\nimport { getSessionStorage } from '@/utils/browserStorage';\nimport Image from 'next/image';\nimport { useRouter } from 'next/navigation';\n\ninterface Props {\n  recallPath?: boolean;\n  text?: string;\n  icon?: string;\n  reverse?: boolean;\n}\nconst ButtonReturn = ({ recallPath = false, text, icon, reverse }: Props) => {\n  const router = useRouter();\n  const handleClick = () => {\n    if (!recallPath) {\n      router.back();\n      return;\n    }\n\n    const previousPath = getSessionStorage(PREVIOUS_PATH);\n    if (previousPath) {\n      router.push(previousPath);\n      return;\n    }\n\n    router.push('/search');\n  };\n\n  return (\n    <button onClick={handleClick} className={`${reverse && 'flex-row-reverse'} flex-center gap-12 text-16 font-medium`} aria-label={text}>\n      <div className=\"relative mt-4 h-24 w-12\">\n        <Image fill src={`/icon/${icon}.svg`} alt=\"\" aria-hidden={true} />\n      </div>\n      {text}\n    </button>\n  );\n};\nexport default ButtonReturn;\n",
  "src/components/common/FadingDot.tsx": "const FadingDot = ({ fill }: { fill?: string }) => {\n  return (\n    <svg className=\"h-40 w-40\" xmlns=\"http://www.w3.org/2000/svg\" fill={fill} viewBox=\"0 0 24 30\">\n      <circle r=\"3\" transform=\"translate(2 15)\" className=\"animate-[pulse_0.8s_infinite]\" />\n      <circle r=\"3\" transform=\"translate(12 15)\" className=\"animate-[pulse_0.8s_infinite_200ms]\" />\n      <circle r=\"3\" transform=\"translate(22 15)\" className=\"animate-[pulse_0.8s_infinite_400ms]\" />\n    </svg>\n  );\n};\n\nexport default FadingDot;\n",
  "src/components/common/IconBase.tsx": "import { ReactNode } from 'react';\n\ninterface Props {\n  render: () => ReactNode;\n  name: string;\n  fontSize?: number;\n}\n\nconst IconBase = ({ render, name, fontSize = 16 }: Props) => {\n  return (\n    <div className=\"flex-center flex-col\">\n      <div className=\"flex-center h-40 w-40\" aria-hidden={true}>\n        {render()}\n      </div>\n      <span className={`text-${fontSize} font-bold`}>{name}</span>\n    </div>\n  );\n};\nexport default IconBase;\n",
  "src/components/common/ItemRating.tsx": "import { RATING_MSG } from '@/constants/default';\nimport Image from 'next/image';\n\ninterface Props {\n  rating: number;\n}\n\nconst ItemRating = ({ rating }: Props) => {\n  const status = Math.floor(rating / 33.5);\n  return (\n    <div className=\"flex flex-col items-center\">\n      <Image width={24} height={24} src={`/icon/rate-${status}.svg`} alt={`평가: ${RATING_MSG[status]}`} />\n      <span className=\"text-12 font-bold\">{rating + '%'}</span>\n    </div>\n  );\n};\nexport default ItemRating;\n",
  "src/components/common/LiftingButton.tsx": "'use client';\n\nimport useDebounce from '@/hooks/useDebounce';\nimport { memo, useCallback, useEffect, useState } from 'react';\nimport IconArrowUp from 'public/icon/arrow-up.svg';\n\nconst LiftingButton = memo(function LiftingButton() {\n  const [isScroll, setIsScroll] = useState(false);\n\n  const handleScroll = useDebounce((e) => {\n    const { scrollY } = window;\n    scrollY > 200 ? setIsScroll(true) : setIsScroll(false);\n  }, 500);\n\n  useEffect(() => {\n    handleScroll();\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  const liftScroll = useCallback(() => {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }, []);\n\n  return isScroll ? (\n    <button\n      onClick={liftScroll}\n      className=\"transform-active fixed bottom-12 right-12 animate-fadeIn rounded-full bg-black-80 p-12 text-white shadow-lg\"\n    >\n      <IconArrowUp />\n    </button>\n  ) : null;\n});\nexport default LiftingButton;\n",
  "src/components/common/LinkBase.tsx": "import Link from 'next/link';\nimport { AnchorHTMLAttributes, ReactNode } from 'react';\n\ninterface Props extends AnchorHTMLAttributes<HTMLAnchorElement> {\n  children: ReactNode;\n  href: string;\n}\n\nconst LinkBase = ({ children, href, className, ...params }: Props) => {\n  return (\n    <Link href={href} className={`flex-center gap-8 rounded-xs bg-black-80 px-12 py-4 ${className}`} {...params}>\n      {children}\n    </Link>\n  );\n};\n\nexport default LinkBase;\n",
  "src/components/common/LinkHome.tsx": "'use client';\n\nimport { PREVIOUS_PATH } from '@/constants/default';\nimport Link from 'next/link';\nimport IconHome from 'public/icon/home.svg';\n\ninterface Props {\n  isPaper?: boolean;\n}\n\nconst LinkHome = ({ isPaper }: Props) => {\n  const handleClick = () => {\n    [PREVIOUS_PATH, 'scroll'].forEach((v) => sessionStorage.removeItem(v));\n  };\n  return (\n    <Link\n      href=\"/\"\n      onClick={handleClick}\n      className={isPaper ? 'flex items-center gap-12 text-16 font-medium' : 'rounded-full bg-white p-12 shadow-sm'}\n    >\n      {isPaper && '홈페이지'}\n      <IconHome />\n    </Link>\n  );\n};\nexport default LinkHome;\n",
  "src/components/common/MetaTag.tsx": "import { Fragment } from 'react';\n\ninterface Props {\n  title?: string;\n  description?: string;\n  imageUrl?: string;\n}\n\nconst MetaTag = ({ title, description, imageUrl }: Props) => {\n  return (\n    <>\n      {['og', 'twitter'].map((str) => (\n        <Fragment key={str}>\n          <meta property={`${str}:title`} content={title ? `${title} | 비긴즈` : '비긴즈'} />\n          <meta\n            property={`${str}:description`}\n            content={description || '편의점과 마트 등 일상의 공간에 있는 비건, 제로웨이스트, 저탄소, 친환경 제품들을 소개합니다.'}\n          />\n          <meta property={`${str}:image`} content={imageUrl || '/image/default.webp'} />\n        </Fragment>\n      ))}\n\n      <meta property=\"og:url\" content=\"vegwins.com\" />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:site_name\" content=\"비긴즈\" />\n      <meta property=\"og:locale\" content=\"ko\" />\n    </>\n  );\n};\n\nexport default MetaTag;\n",
  "src/components/common/ModalFrame.tsx": "import useModalScroll from '@/hooks/useModalScroll';\nimport Image from 'next/image';\nimport { ReactNode } from 'react';\nimport ModalPortal from '@/components/common/ModalPortal';\n\ninterface ModalFrameProps {\n  children: ReactNode;\n  closeModal: () => void;\n}\n\nconst ModalFrame = ({ children, closeModal }: ModalFrameProps) => {\n  useModalScroll();\n  return (\n    <ModalPortal>\n      <div\n        onClick={closeModal}\n        className=\"fixed left-0 top-0 z-20 flex h-screen w-full items-center justify-center bg-gray-900 bg-opacity-70 text-center\"\n      >\n        <div\n          className=\"relative mx-32 flex min-h-max w-4/5 min-w-300 max-w-400 flex-col gap-20 rounded-md bg-white p-20\"\n          onClick={(event) => event.stopPropagation()}\n          role=\"alert\"\n          aria-label=\"팝업창\"\n        >\n          {children}\n          <button onClick={closeModal} className=\"absolute right-24 top-24\">\n            <Image width={18} height={18} src=\"/icon/cancel.svg\" alt=\"팝업창 종료\" />\n          </button>\n        </div>\n      </div>\n    </ModalPortal>\n  );\n};\nexport default ModalFrame;\n",
  "src/components/common/ModalPortal.tsx": "import { ReactNode } from 'react';\nimport ReactDOM from 'react-dom';\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst ModalPortal = ({ children }: Props) => {\n  const el = document.getElementById('modal') as HTMLElement;\n  return ReactDOM.createPortal(children, el);\n};\n\nexport default ModalPortal;\n",
  "src/components/dashboard/BottomSheetDashboard.tsx": "'use client';\n\nimport { useRouter } from 'next/navigation';\nimport { ReactNode } from 'react';\nimport BottomSheet from '@/components/common/BottomSheet';\n\ninterface Props {\n  children: ReactNode;\n}\nconst BottomSheetDashboard = ({ children }: Props) => {\n  const router = useRouter();\n  const toggleByClick = () => {\n    router.push('/');\n  };\n  return <BottomSheet toggleByClick={toggleByClick}>{children}</BottomSheet>;\n};\nexport default BottomSheetDashboard;\n",
  "src/components/dashboard/Dashboard.tsx": "import { TABS_KEY } from '@/constants/dashboard';\nimport { getCookie } from '@/utils/cookie';\nimport DashboardMyInfo from '@/components/dashboard/DashboardMyInfo';\nimport MyInfoChangeNickname from '@/components/dashboard/MyInfoChangeNickname';\nimport MyInfoComment from '@/components/dashboard/MyInfoComment';\nimport MyInfoPaper from '@/components/dashboard/MyInfoPaper';\nimport MyInfoRating from '@/components/dashboard/MyInfoRating';\nimport Tab from '@/components/dashboard/Tab';\n\nconst Dashboard = async () => {\n  const session = await getCookie('v_s');\n  if (!session) {\n    return null;\n  }\n  return (\n    <div className=\"flex flex-col gap-20 overflow-hidden px-16\">\n      <DashboardMyInfo session={session}>\n        <Tab condition={TABS_KEY[0]}>\n          <MyInfoChangeNickname session={session} />\n        </Tab>\n        <Tab condition={TABS_KEY[1]}>\n          <MyInfoPaper />\n        </Tab>\n        <Tab condition={TABS_KEY[2]}>\n          <MyInfoComment session={session} />\n        </Tab>\n        <Tab condition={TABS_KEY[3]}>\n          <MyInfoRating />\n        </Tab>\n      </DashboardMyInfo>\n    </div>\n  );\n};\nexport default Dashboard;\n",
  "src/components/dashboard/DashboardMyInfo.tsx": "'use client';\n\nimport { Session } from '@/types/session';\nimport { ReactNode, createContext, useState } from 'react';\nimport Logout from '@/components/dashboard/Logout';\nimport MyInfo from '@/components/dashboard/MyInfo';\nimport MyInfoTabList from '@/components/dashboard/MyInfoTabList';\nimport MyInfoTitle from '@/components/dashboard/MyInfoTitle';\n\ninterface Props {\n  session: Session;\n  children: ReactNode;\n}\n\nexport const TabContext = createContext('');\n\nconst DashboardMyInfo = ({ session, children }: Props) => {\n  const [tab, setTab] = useState('');\n\n  return (\n    <TabContext.Provider value={tab}>\n      <MyInfoTitle session={session} tab={tab} />\n      <If condition={!!tab}>\n        <MyInfo setTab={setTab}>{children}</MyInfo>\n      </If>\n      <If condition={!tab}>\n        <div className=\"mb-20 grid grid-cols-2 place-items-center gap-y-28 text-16 font-bold\">\n          <MyInfoTabList setTab={setTab} />\n          <Logout />\n        </div>\n      </If>\n    </TabContext.Provider>\n  );\n};\nexport default DashboardMyInfo;\n\nconst If = ({ condition, children }: { condition: boolean; children: ReactNode }) => {\n  return condition && children;\n};\n",
  "src/components/dashboard/Logout.tsx": "'use client';\n\nimport { logoutCookie } from '@/utils/cookie';\nimport { useRouter } from 'next/navigation';\nimport IconLogout from 'public/icon/logout.svg';\n\nconst Logout = () => {\n  const router = useRouter();\n  const logout = async () => {\n    await logoutCookie();\n    router.push('/');\n  };\n\n  return (\n    <button onClick={logout} className=\"flex-center start- col-start-2 gap-8\">\n      <IconLogout />\n      로그아웃\n    </button>\n  );\n};\nexport default Logout;\n",
  "src/components/dashboard/MyInfo.tsx": "import Image from 'next/image';\nimport { ReactNode } from 'react';\nimport ApiErrorBoundary from '@/components/errorHandling/ApiErrorBoundary';\n\ninterface Props {\n  setTab: (tab: string) => void;\n  children: ReactNode;\n}\n\nconst MyInfo = ({ setTab, children }: Props) => {\n  return (\n    <div className=\"animate-fadeIn\">\n      <button\n        onClick={() => setTab('')}\n        className=\"transform-active flex items-center gap-8 rounded-full bg-black-100 px-12 py-4 text-16 font-medium text-white\"\n      >\n        <Image width={10} height={24} src=\"/icon/arrow-left-s.svg\" alt=\"뒤로가기\" aria-hidden />\n        뒤로 가기\n      </button>\n      <div className=\"mb-60 mt-20 flex flex-col gap-12\">\n        <ApiErrorBoundary>{children}</ApiErrorBoundary>\n      </div>\n    </div>\n  );\n};\nexport default MyInfo;\n",
  "src/components/dashboard/MyInfoChangeNickname.tsx": "'use client';\n\nimport { Session } from '@/types/session';\nimport { getCookie, setCookie } from '@/utils/cookie';\nimport { putData } from '@/utils/fetching';\nimport { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport toast from 'react-hot-toast';\n\nconst REG_NICKNAME = /^(?=.*[a-z0-9가-힣])[a-z0-9가-힣\\s]{2,16}$/;\n\ninterface Props {\n  session: Session;\n}\nconst MyInfoChangeNickname = ({ session }: Props) => {\n  const [value, setValue] = useState('');\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const [pending, setPending] = useState(false);\n  const [error, setError] = useState({ message: '' });\n  const nicknameChange = async () => {\n    if (pending) {\n      return;\n    }\n    if (!REG_NICKNAME.test(value)) {\n      setError({ message: '2-15자 이내, 특수문자 및 초성 금지' });\n      return;\n    }\n\n    try {\n      setPending(true);\n      const { nickname: currentNickname } = await getCookie('v_s');\n      if (currentNickname === value) {\n        setError({ message: '현재 닉네임과 다르게 입력해 주십시오.' });\n        return;\n      }\n      const { nickname, error } = await putData({ path: '/user/nickname', body: { newNickname: value } });\n      if (error) {\n        setError({ message: error });\n        return;\n      }\n      if (nickname) {\n        toast.success('닉네임 변경 완료!');\n        setCookie({ name: 'v_s', value: { nickname }, path: '/' });\n        setError({ message: '' });\n      }\n    } catch (e: any) {\n      toast.error('다시 시도해 주십시오.');\n    } finally {\n      setPending(false);\n    }\n  };\n  return (\n    <div className=\"relative flex gap-12\">\n      <input\n        value={value}\n        onChange={handleChange}\n        onKeyUp={(e: KeyboardEvent) => e.code === 'Enter' && nicknameChange()}\n        placeholder={session?.nickname}\n        className={`${error.message ? 'border-red-600' : 'border-black-100'} w-full rounded-sm border px-12 text-18 font-bold`}\n      />\n      <button onClick={nicknameChange} className=\"transform-active shrink-0 rounded-sm bg-black-100 p-8 text-18 text-white\">\n        변경하기\n      </button>\n      <span className={`${error.message ? 'text-red-600' : ''} absolute -bottom-28 ml-8 text-16 font-medium`}>\n        {error.message || '2-15자 이내, 특수문자 및 초성 금지'}\n      </span>\n    </div>\n  );\n};\nexport default MyInfoChangeNickname;\n",
  "src/components/dashboard/MyInfoComment.tsx": "'use client';\n\nimport useEditComment from '@/hooks/useEditComment';\nimport useFetchedState from '@/hooks/useFetchedState';\nimport { Comment } from '@/types/data';\nimport { Session } from '@/types/session';\nimport Link from 'next/link';\nimport DeferredSpinner from '@/components/errorHandling/DeferredSpinner';\nimport UsersCommentInput from '@/components/paper_main/UsersCommentInput';\nimport UsersCommentItem from '@/components/paper_main/UsersCommentItem';\n\ninterface Props {\n  session: Session;\n}\nconst MyInfoComment = ({ session }: Props) => {\n  const { state: myComment, setState, pending } = useFetchedState<Comment[]>({ init: [], path: '/user/comment', deps: [], queryKey: ['comment'] });\n  const { targetComment, resetTarget, ButtonEdit } = useEditComment();\n  if (pending) {\n    return <DeferredSpinner />;\n  }\n  return (\n    <div className=\"scrollbar flex max-h-400 min-h-108 flex-col gap-12 overflow-y-scroll pr-20\">\n      {myComment.length ? (\n        myComment.map((comment) => {\n          const isEdited = targetComment?.status === 'edit' && targetComment.comment._id === comment._id;\n\n          console.log(comment);\n\n          return (\n            <div key={comment._id}>\n              {/* <Link href={''}>{comment.paper.title}</Link> */}\n              <UsersCommentItem\n                session={session}\n                comment={comment}\n                onSuccess={() => setState((prev) => prev.filter((c) => c._id !== comment._id))}\n                isEdited={isEdited}\n                ButtonEdit={ButtonEdit}\n              />\n              <hr className=\"border-black-60\" />\n              {isEdited && <UsersCommentInput sessionName={session?.nickname} resetTarget={resetTarget} targetComment={targetComment} />}\n            </div>\n          );\n        })\n      ) : (\n        <p className=\"m-auto text-16\">작성한 댓글이 없습니다.</p>\n      )}\n    </div>\n  );\n};\nexport default MyInfoComment;\n",
  "src/components/dashboard/MyInfoPaper.tsx": "import { getSSR } from '@/utils/fetching';\nimport SearchResultItemList from '@/components/search_main/SearchResultItemList';\n\nconst MyInfoPaper = async () => {\n  const myPaper = await getSSR({ path: '/user/paper', queryKey: ['myPaper'] });\n  return (\n    <div className=\"scrollbar flex max-h-400 min-h-108 overflow-y-scroll pr-20\">\n      {myPaper?.length ? <SearchResultItemList data={myPaper} my /> : <p className=\"m-auto text-16\">작성한 문서가 없습니다.</p>}\n    </div>\n  );\n};\nexport default MyInfoPaper;\n",
  "src/components/dashboard/MyInfoRating.tsx": "import { Rating, SearchItem } from '@/types/data';\nimport { getSSR } from '@/utils/fetching';\nimport { Fragment } from 'react';\nimport MyInfoRatingSelector from '@/components/dashboard/MyInfoRatingSelector';\nimport SearchResultItem from '@/components/search_main/SearchResultItem';\n\nconst MyInfoRating = async () => {\n  const myRating: Array<{ rating: Rating; _id: SearchItem }> = await getSSR({ path: '/user/rating', queryKey: ['myRating'] });\n  return (\n    <div className=\"scrollbar flex max-h-400 min-h-108 flex-col gap-20 overflow-y-scroll pr-20\">\n      {myRating?.length ? (\n        myRating.map((data, i) => (\n          <Fragment key={data._id?._id}>\n            {!!i && <hr className=\"border-black-100\" />}\n            <SearchResultItem {...data._id} />\n            <MyInfoRatingSelector paperId={data._id?._id} rating={data.rating} />\n          </Fragment>\n        ))\n      ) : (\n        <p className=\"m-auto text-16\">평가한 문서가 없습니다.</p>\n      )}\n    </div>\n  );\n};\nexport default MyInfoRating;\n",
  "src/components/dashboard/MyInfoRatingSelector.tsx": "'use client';\n\nimport { Rating } from '@/types/data';\nimport { useState } from 'react';\nimport MyRatingSelector from '@/components/paper_main/MyRatingSelector';\n\ninterface Props {\n  paperId: string;\n  rating: Rating;\n}\n\nconst MyInfoRatingSelector = ({ paperId, rating: initial }: Props) => {\n  const [rating, setRating] = useState(initial);\n  return <MyRatingSelector paperId={paperId} rating={rating} setRating={setRating} />;\n};\nexport default MyInfoRatingSelector;\n",
  "src/components/dashboard/MyInfoTabList.tsx": "import { TABS, TABS_KEY } from '@/constants/dashboard';\nimport Image from 'next/image';\n\ninterface Props {\n  setTab: (tab: string) => void;\n}\n\nconst MyInfoTabList = ({ setTab }: Props) => {\n  return TABS_KEY.map((key) => (\n    <button key={key} onClick={() => setTab(key)} className=\"flex-center h-52 gap-8 rounded-sm\" aria-label={key}>\n      <Image width={36} height={36} src={TABS[key]} alt={key} aria-hidden />\n      {key}\n    </button>\n  ));\n};\nexport default MyInfoTabList;\n",
  "src/components/dashboard/MyInfoTitle.tsx": "import { Session } from '@/types/session';\n\ninterface Props {\n  session: Session;\n  tab: string;\n}\n\nconst MyInfoTitle = ({ session, tab }: Props) => {\n  return (\n    <div className=\"flex flex-col gap-12 text-20\">\n      {tab ? (\n        <h3>\n          <strong>{tab}</strong>\n        </h3>\n      ) : (\n        <h3>\n          <strong>{session?.nickname}</strong>\n          님, 안녕하세요!\n        </h3>\n      )}\n    </div>\n  );\n};\nexport default MyInfoTitle;\n",
  "src/components/dashboard/Tab.tsx": "'use client';\n\nimport { ReactNode, useContext } from 'react';\nimport { TabContext } from '@/components/dashboard/DashboardMyInfo';\n\nconst Tab = ({ condition, children }: { condition: string; children: ReactNode }) => {\n  const tab = useContext(TabContext);\n\n  return tab === condition && children;\n};\nexport default Tab;\n",
  "src/components/edit/ButtonDeletePaper.tsx": "'use client';\n\nimport useUncontrolInput from '@/hooks/useUncontrolInput';\nimport { deleteData } from '@/utils/fetching';\nimport { refreshTag } from '@/utils/revalidate';\nimport Image from 'next/image';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\nimport toast from 'react-hot-toast';\nimport ModalFrame from '@/components/common/ModalFrame';\nimport ModalPortal from '@/components/common/ModalPortal';\n\ninterface Props {\n  title: string;\n  paperId: string;\n}\nconst ButtonDeletePaper = ({ title, paperId }: Props) => {\n  const [open, setOpen] = useState(false);\n  const { ref: inputRef, refCallback } = useUncontrolInput<HTMLInputElement>();\n  const router = useRouter();\n\n  const deleteByClick = async () => {\n    if (inputRef.current?.value !== title) {\n      return;\n    }\n    try {\n      const res = await deleteData({ path: `/paper/${paperId}` });\n      if (res?.success) {\n        toast.success('삭제 완료');\n        await refreshTag(['search', 'myPaper', 'myRating']);\n        router.push('/');\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  return (\n    <button\n      onClick={() => setOpen(true)}\n      className=\"flex-center gap-8 rounded-sm border border-black-100 px-8 text-16 font-medium\"\n      aria-label=\"문서 삭제\"\n    >\n      <div className=\"relative h-24 w-24\">\n        <Image fill src=\"/icon/delete.svg\" alt=\"\" aria-hidden />\n      </div>\n      삭제하기\n      {open && (\n        <ModalPortal>\n          <ModalFrame closeModal={() => setOpen(false)}>\n            <div className=\"text-14\">\n              <p className=\"text-18 font-bold\">정말로 삭제하시겠습니까?</p>\n              <span>삭제 후, 복구가 불가능합니다.</span>\n              <br />\n              <strong>{`\"${title}\"`}</strong>\n              <span>입력해주십시오.</span>\n            </div>\n            <input ref={refCallback} placeholder={title} className=\"w-full rounded-sm border border-black-100 px-12 py-4 text-18 font-bold\" />\n            <div className=\"mx-auto flex gap-40\">\n              <button onClick={deleteByClick} className=\"transform-active w-100 rounded-sm border border-black-100 p-8 text-16 font-bold\">\n                삭제하기\n              </button>\n              <button onClick={() => setOpen(false)} className=\"transform-active w-100 rounded-sm bg-black-100 p-8 text-16 text-white\">\n                취소하기\n              </button>\n            </div>\n          </ModalFrame>\n        </ModalPortal>\n      )}\n    </button>\n  );\n};\nexport default ButtonDeletePaper;\n",
  "src/components/errorHandling/ApiErrorBoundary.tsx": "'use client';\n\nimport { ErrorBoundary, ErrorComponent } from 'next/dist/client/components/error-boundary';\nimport { ReactNode, Suspense, useEffect } from 'react';\nimport Spinner from '@/components/errorHandling/Spinner';\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst ApiErrorBoundary = ({ children }: Props) => {\n  return <ErrorBoundary errorComponent={NetworkFallback}>{children}</ErrorBoundary>;\n};\nexport default ApiErrorBoundary;\n\nconst NetworkFallback: ErrorComponent = ({ error, reset }) => {\n  useEffect(() => {\n    console.error(error);\n  }, [error]);\n\n  return (\n    <div className=\"flex-center grow flex-col gap-12 text-20 font-bold\">\n      <div>네트워크 오류: 인터넷 연결을 확인해 주세요.</div>\n      <button onClick={() => reset()} className=\"flex-center gap-8 text-14 text-sky\">\n        새로 고침\n        <Spinner />\n      </button>\n    </div>\n  );\n};\n",
  "src/components/errorHandling/DeferredSpinner.tsx": "import Deferring from '@/components/errorHandling/Deferring';\nimport Spinner from '@/components/errorHandling/Spinner';\n\nconst DeferredSpinner = () => {\n  return (\n    <div className=\"flex-center h-108 w-full\">\n      <Deferring>\n        <Spinner duration=\"infinity\" />\n      </Deferring>\n    </div>\n  );\n};\nexport default DeferredSpinner;\n",
  "src/components/errorHandling/Deferring.tsx": "'use client';\n\nimport { PropsWithChildren, useEffect, useState } from 'react';\n\nconst Deferring = ({ children }: PropsWithChildren) => {\n  const [isDeferred, setIsDeferred] = useState(false);\n  useEffect(() => {\n    const timeOut = setTimeout(() => {\n      setIsDeferred(true);\n    }, 200);\n    return () => clearInterval(timeOut);\n  }, []);\n  if (!isDeferred) return null;\n  return <>{children}</>;\n};\n\nexport default Deferring;\n",
  "src/components/errorHandling/Spinner.tsx": "interface Props {\n  duration?: string;\n}\nconst Spinner = ({ duration = '1s' }: Props) => {\n  const durationCSS: { [key: string]: string } = {\n    '1s': 'animate-[spin_1s]',\n    infinity: 'animate-spin',\n  };\n  return (\n    <svg className={durationCSS[duration]} width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M12 24C15.0667 24 17.7389 22.9833 20.0167 20.95C22.2944 18.9167 23.6 16.3778 23.9333 13.3333H21.2C20.8889 15.6444 19.8611 17.5556 18.1167 19.0667C16.3722 20.5778 14.3333 21.3333 12 21.3333C9.4 21.3333 7.19445 20.4278 5.38333 18.6167C3.57222 16.8056 2.66667 14.6 2.66667 12C2.66667 9.4 3.57222 7.19444 5.38333 5.38333C7.19445 3.57222 9.4 2.66667 12 2.66667C13.5333 2.66667 14.9667 3.02222 16.3 3.73333C17.6333 4.44444 18.7556 5.42222 19.6667 6.66667H16V9.33333H24V1.33333H21.3333V4.46667C20.2 3.04444 18.8167 1.94444 17.1833 1.16667C15.55 0.388889 13.8222 0 12 0C10.3333 0 8.77222 0.316667 7.31667 0.95C5.86111 1.58333 4.59445 2.43889 3.51667 3.51667C2.43889 4.59444 1.58333 5.86111 0.95 7.31667C0.316667 8.77222 -4.76837e-07 10.3333 -4.76837e-07 12C-4.76837e-07 13.6667 0.316667 15.2278 0.95 16.6833C1.58333 18.1389 2.43889 19.4056 3.51667 20.4833C4.59445 21.5611 5.86111 22.4167 7.31667 23.05C8.77222 23.6833 10.3333 24 12 24Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\nexport default Spinner;\n",
  "src/components/home_footer/Footer.tsx": "import Link from 'next/link';\nimport IconGithub from 'public/icon/github.svg';\nimport IconInstagram from 'public/icon/insta.svg';\n\nconst Footer = () => {\n  return (\n    <>\n      <p className=\"mb-12\">\n        <strong>비긴즈, Vegwins(Vegan wins)</strong>는 일상에서 채식 제품을 찾고, 채식 지향을 실천하기 위해 만들어졌습니다. 완벽하진 않아도 작은\n        성공을 쌓아가면서, <strong>함께 나아가기</strong>를 지향합니다. <span></span>\n      </p>\n      <div className=\"mb-12 flex gap-20\">\n        <span>han-kimm@2024</span>\n        <Link href=\"https://www.instagram.com/hank1mm/\" aria-label=\"개발자 인스타그램 바로가기\">\n          <IconInstagram />\n        </Link>\n        <Link href=\"https://github.com/han-kimm\" aria-label=\"개발자 깃허브 바로가기\">\n          <IconGithub />\n        </Link>\n      </div>\n      <Link href=\"/privatePolicy\">개인정보처리방침</Link>\n    </>\n  );\n};\nexport default Footer;\n",
  "src/components/home_header/AuthChecker.tsx": "import { getCookie } from '@/utils/cookie';\nimport AuthCheckerButton from '@/components/common/AuthButton';\nimport AuthCheckerAfter from '@/components/home_header/AuthCheckerAfter';\n\nconst AuthChecker = async () => {\n  const session = await getCookie('v_s');\n  return session ? <AuthCheckerAfter /> : <AuthCheckerButton />;\n};\nexport default AuthChecker;\n",
  "src/components/home_header/AuthCheckerAfter.tsx": "import Dashboard from '@/components/dashboard/Dashboard';\nimport Board from '@/components/home_header/Board';\nimport Notice from '@/components/home_header/Notice';\n\nconst AuthAfter = () => {\n  return (\n    <>\n      <Notice />\n      <Board>\n        <Dashboard />\n      </Board>\n    </>\n  );\n};\nexport default AuthAfter;\n",
  "src/components/home_header/Board.tsx": "'use client';\n\nimport { ReactNode, useState } from 'react';\nimport BottomSheet from '@/components/common/BottomSheet';\nimport IconProfile from 'public/icon/profile.svg';\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst Board = ({ children }: Props) => {\n  const [open, setOpen] = useState(false);\n  const toggleByClick = () => {\n    setOpen((prev) => !prev);\n  };\n  return (\n    <>\n      <button onClick={toggleByClick} aria-label=\"내 정보 모아보기\">\n        <IconProfile />\n      </button>\n      {open && <BottomSheet toggleByClick={toggleByClick}>{children}</BottomSheet>}\n    </>\n  );\n};\nexport default Board;\n",
  "src/components/home_header/BottomSheetNotice.tsx": "import { Notification } from '@/types/data';\nimport { timeDiff } from '@/utils/timeDiff';\nimport Link from 'next/link';\nimport BottomSheet from '@/components/common/BottomSheet';\n\ninterface Props {\n  toggleByClick: () => void;\n  data: Notification[];\n  isEmpty: boolean;\n  deleteByClick: (id?: string) => () => void;\n}\n\nconst BottomSheetNotice = ({ toggleByClick, data, isEmpty, deleteByClick }: Props) => {\n  return (\n    <BottomSheet toggleByClick={toggleByClick}>\n      <div className=\"mb-20 flex flex-col gap-20 px-16\">\n        <h3 className=\"text-20 font-bold\">알림 목록</h3>\n        <div className=\"scrollbar flex max-h-200 min-h-80 flex-col overflow-y-scroll pr-12\">\n          {isEmpty ? (\n            <p className=\"m-auto text-16\">도착한 알림이 없습니다.</p>\n          ) : (\n            data?.map((data, i) => (\n              <div key={data._id} className={`${!!i && 'border-t border-black-40'} flex justify-between py-20`}>\n                <Link href={`/paper/${data.paper._id}`} onClick={deleteByClick(data._id)}>\n                  <h4 className=\"mb-4 text-16\">\n                    <strong>{data.paper.title}</strong>에서 <strong>{makeLabelText(data.type)}</strong> 알림\n                  </h4>\n                  {data.comment && <p className=\"text-14\">{data.comment.content}</p>}\n                </Link>\n                <span className=\"shrink-0 text-14\">{timeDiff(data.createdAt)}</span>\n              </div>\n            ))\n          )}\n        </div>\n        <button\n          onClick={deleteByClick()}\n          disabled={isEmpty}\n          className={`${isEmpty || 'transform-active bg-black-100 text-white'} rounded-full bg-black-0 px-12 py-4 text-16 font-bold `}\n        >\n          모두 삭제\n        </button>\n      </div>\n    </BottomSheet>\n  );\n};\nexport default BottomSheetNotice;\n\nconst makeLabelText = (text: string) => {\n  switch (text) {\n    case 'comment':\n      return '댓글';\n    case 'recomment':\n      return '답글';\n    case 'view':\n      return '조회수 100회 달성';\n    case 'rating':\n      return '10명이 평가한 문서';\n  }\n};\n",
  "src/components/home_header/Notice.tsx": "'use client';\n\nimport useFetchedState from '@/hooks/useFetchedState';\nimport { Notification } from '@/types/data';\nimport { deleteData } from '@/utils/fetching';\nimport dynamic from 'next/dynamic';\nimport { useCallback, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport IconBell from 'public/icon/bell.svg';\n\nconst BottomSheetNotice = dynamic(() => import('./BottomSheetNotice'), { ssr: false });\n\nconst Notice = () => {\n  const [open, setOpen] = useState(false);\n\n  const toggleByClick = useCallback(() => {\n    setOpen((prev) => !prev);\n  }, []);\n\n  const { state: notificationData, setState } = useFetchedState<Notification[]>({\n    init: [],\n    path: '/user/notification',\n    deps: [],\n  });\n  const isEmpty = !notificationData?.length;\n\n  const deleteByClick = (deleteId?: string) => async () => {\n    try {\n      if (isEmpty) {\n        return;\n      }\n\n      let body;\n      if (deleteId) {\n        body = { deleteId };\n        await deleteData({ path: '/user/notification', body });\n        setState((prev) => prev.filter((n) => n._id !== deleteId));\n      } else {\n        body = { all: true };\n        await deleteData({ path: '/user/notification', body });\n        setState([]);\n      }\n      toast.success('알림 삭제 완료');\n    } catch (e) {\n      console.error(e);\n      toast.error('다시 시도해 주십시오.');\n    }\n  };\n  return (\n    <>\n      <button onClick={toggleByClick} className=\"relative\">\n        <div className={`${isEmpty || 'animate-bell'}`}>\n          <IconBell />\n        </div>\n        {isEmpty || (\n          <div className=\"flex-center absolute -right-24 top-0 h-24 w-24 animate-fadeIn rounded-full bg-orange text-14 font-bold text-black-100\">\n            {notificationData.length}\n          </div>\n        )}\n      </button>\n      {open && <BottomSheetNotice toggleByClick={toggleByClick} data={notificationData} isEmpty={isEmpty} deleteByClick={deleteByClick} />}\n    </>\n  );\n};\nexport default Notice;\n",
  "src/components/home_main/Carousel.tsx": "'use client';\n\nimport useDotButton from '@/hooks/useDotButton';\nimport { CarouselData } from '@/types/data';\nimport Autoplay from 'embla-carousel-autoplay';\nimport useEmblaCarousel from 'embla-carousel-react';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\ninterface Props {\n  data: CarouselData[];\n}\n\nconst Carousel = ({ data }: Props) => {\n  const [emblaRef, emblaApi] = useEmblaCarousel({ loop: true }, [Autoplay({ delay: 5000 })]);\n  const indicate = useDotButton(emblaApi);\n\n  return (\n    <section className=\"relative mb-20 w-full px-40\" aria-label=\"슬라이드: 이용 방법과 추천 제품\">\n      <div ref={emblaRef} className=\"overflow-hidden rounded-md bg-white shadow-lg\">\n        <CarouselSlide data={data} {...indicate} />\n      </div>\n      <div className=\"flex-center absolute -bottom-16 left-1/2 mt-4 w-4/5 -translate-x-1/2 -translate-y-1/2 gap-20 px-40\">\n        <CarouselIndicator data={data} {...indicate} />\n      </div>\n    </section>\n  );\n};\nexport default Carousel;\n\ninterface SlideProps {\n  data: CarouselData[];\n  selectedIndex: number;\n}\n\nconst CarouselSlide = ({ data }: SlideProps) => {\n  const textColor = {\n    white: 'text-white',\n  };\n  return (\n    <div className=\"flex h-200\" role=\"marquee\">\n      {data?.map((data, i, arr) => (\n        <Link\n          href={data.href}\n          key={i}\n          className=\"relative flex w-full flex-shrink-0 items-end p-28\"\n          aria-label={`${arr.length}번째 중 ${i + 1}번째 슬라이드: ${data.title}로 이동`}\n        >\n          <Image fill priority sizes=\"(min-width: 500px) 500px, 250px\" src={data.imageUrl} alt=\"\" className=\"object-cover\" aria-hidden />\n          <h2 className={`${textColor[data.color] ?? ''} z-10 text-24 font-bold`}>{data.title}</h2>\n        </Link>\n      ))}\n    </div>\n  );\n};\n\ninterface IndicatorProps extends SlideProps {\n  onDotButtonClick: (index: number) => void;\n}\n\nconst CarouselIndicator = ({ data, selectedIndex, onDotButtonClick }: IndicatorProps) => {\n  return data?.map((_, index) => (\n    <button\n      key={index}\n      onClick={() => onDotButtonClick(index)}\n      className={`h-[0.6rem] rounded-full transition-all ${index === selectedIndex ? 'basis-100 bg-black-80' : 'basis-32 bg-black-40'}`}\n      aria-current={index === selectedIndex}\n      aria-label={`${index}번째 슬라이드 바로가기`}\n    />\n  ));\n};\n",
  "src/components/home_main/LinkCategory.tsx": "'use client';\n\nimport { CATEGORY, CATEGORY_KEY } from '@/constants/category';\nimport { PREVIOUS_PATH } from '@/constants/default';\nimport { useDraggable } from '@/hooks/useDragScroll';\nimport { setSessionStorage } from '@/utils/browserStorage';\nimport Link from 'next/link';\nimport { useRef } from 'react';\nimport IconBase from '@/components/common/IconBase';\n\nconst LinkCategory = () => {\n  const dragRef = useRef<HTMLDivElement>(null);\n  const handler = useDraggable(dragRef);\n  const savePath = (key: string) => {\n    setSessionStorage({ key: PREVIOUS_PATH, value: `/search?c=${key}` });\n  };\n  return (\n    <section\n      ref={dragRef}\n      {...handler}\n      className=\"flex h-120 w-full gap-20 overflow-scroll pt-4\"\n      role=\"group\"\n      aria-label=\"카테고리에 따른 검색 페이지 이동\"\n    >\n      {CATEGORY_KEY.map((key) => (\n        <Link\n          key={key}\n          href={`/search?c=${key}`}\n          onClick={() => savePath(key)}\n          className={`flex-center transform-active h-100 w-100 shrink-0 flex-col gap-8 rounded-sm bg-white py-8 shadow-sm first:ml-40 last:mr-40`}\n          aria-label={`${key} 카테고리 검색 페이지로 이동`}\n        >\n          <IconBase render={CATEGORY[key]} name={key} />\n        </Link>\n      ))}\n    </section>\n  );\n};\nexport default LinkCategory;\n",
  "src/components/home_main/LinkSearch.tsx": "import Link from 'next/link';\nimport IconSearch from 'public/icon/search.svg';\n\nconst LinkSearch = () => {\n  return (\n    <section className=\"w-full px-40\" aria-label=\"검색 페이지로 이동\">\n      <Link\n        href=\"/search\"\n        className=\"transform-active flex items-center gap-20 rounded-full bg-black-80 p-8 pl-20 text-20 font-medium text-white shadow-md\"\n      >\n        <IconSearch />\n        <span>검색하기</span>\n      </Link>\n    </section>\n  );\n};\nexport default LinkSearch;\n",
  "src/components/home_main/LinkWrite.tsx": "import { getCookie } from '@/utils/cookie';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport AuthSign from '@/components/common/AuthSign';\n\nconst LinkWrite = async () => {\n  const session = await getCookie('v_s');\n  return (\n    <section className=\"flex w-full gap-12 px-40\" aria-label=\"게시판 또는 문서작성으로 이동\">\n      <Link\n        href={session ? '/write' : '#'}\n        className={`${session ? '' : 'active:bg-orange'} transform-active flex grow items-start justify-between rounded-sm bg-white px-20 py-28 shadow-md`}\n      >\n        <div>\n          <p className={`${session ? '' : 'mb-28'} text-start text-18 font-bold`}>문서 작성</p>\n          {session ? null : <AuthSign />}\n        </div>\n        <Image width={32} height={32} src=\"/icon/pencil.svg\" alt=\"작성 이미지\" aria-hidden={true} />\n      </Link>\n    </section>\n  );\n};\nexport default LinkWrite;\n\n// const LinkCommnunity = () => {\n//   return (\n//     <Link href=\"/community\" className=\"grow rounded-sm bg-white px-20 py-28 shadow-md\">\n//       <p className=\"mb-28 text-start text-18 font-bold\">게시판</p>\n//       <Image width={32} height={32} src=\"/icon/chat.svg\" alt=\"게시판 이미지\" aria-hidden={true} />\n//     </Link>\n//   );\n// };\n",
  "src/components/paper_main/Information.tsx": "import { LABEL, LABEL_KEY } from '@/constants/default';\nimport { Paper } from '@/types/data';\nimport InformationContent from '@/components/paper_main/InformationContent';\nimport InformationTable from '@/components/paper_main/InformationTable';\nimport InformationRow from '@/components/paper_main/informationRow';\n\ninterface Props {\n  data: Paper;\n}\nconst Information = ({ data }: Props) => {\n  return (\n    <InformationTable>\n      {LABEL_KEY.map((label) => (\n        <InformationRow key={label} label={LABEL[label]}>\n          <InformationContent label={LABEL[label]} value={data[label]} />\n        </InformationRow>\n      ))}\n    </InformationTable>\n  );\n};\n\nexport default Information;\n",
  "src/components/paper_main/InformationContent.tsx": "import { CATEGORY } from '@/constants/category';\nimport { LABEL, SP_CATEGORY, SP_KEYWORD } from '@/constants/default';\nimport Link from 'next/link';\nimport IconBase from '@/components/common/IconBase';\nimport InformationImage from '@/components/paper_main/InformationImage';\n\nconst InformationContent = ({ label, value }: { label: string; value: string | string[] }) => {\n  let SwitchedComponent;\n  switch (label) {\n    case LABEL.title:\n      SwitchedComponent = <p className=\"text-20 font-bold\">{value}</p>;\n      break;\n    case LABEL.category:\n      if (typeof value === 'object') {\n        SwitchedComponent = (\n          <div className=\"flex flex-wrap gap-16\">\n            {value.map((v) => (\n              <Link href={`/search?${SP_CATEGORY}=${v}`} key={v} className=\"transform-active\">\n                <IconBase key={v} name={v} render={CATEGORY[v]} fontSize={12} />\n              </Link>\n            ))}\n          </div>\n        );\n      }\n      break;\n    case LABEL.hashtag:\n      if (typeof value === 'object') {\n        SwitchedComponent = (\n          <div className=\"flex flex-wrap gap-16 text-14 font-bold\">\n            {value.map((tag) => (\n              <Link\n                href={`/search?${SP_KEYWORD}=${encodeURIComponent(tag)}`}\n                key={tag}\n                className=\"transform-active shrink-0 rounded-full border border-black-100 px-8 active:bg-black-100 active:text-white\"\n              >\n                {tag}\n              </Link>\n            ))}\n          </div>\n        );\n      }\n      break;\n    case LABEL.description:\n      SwitchedComponent = <p className=\"whitespace-pre-wrap text-14 font-medium\">{value}</p>;\n      break;\n    case LABEL.imageUrl:\n      SwitchedComponent = <InformationImage value={value} />;\n  }\n\n  return SwitchedComponent;\n};\nexport default InformationContent;\n",
  "src/components/paper_main/InformationImage.tsx": "'use client';\n\nimport { DEFAULT_IMAGE } from '@/constants/default';\nimport Image from 'next/image';\nimport { useState } from 'react';\n\ninterface Props {\n  value: string | string[];\n}\n\nconst InformationImage = ({ value }: Props) => {\n  const [selected, setSelected] = useState(0);\n  if (typeof value === 'string') {\n    return (\n      <Image\n        width={300}\n        height={300}\n        priority\n        sizes=\"600px\"\n        src={value || DEFAULT_IMAGE}\n        alt=\"\"\n        className=\"mx-auto rounded-md object-cover\"\n        aria-hidden={true}\n      />\n    );\n  }\n  const length = value.length;\n  let start = 0;\n\n  return (\n    <div\n      onDragStart={(e) => (start = e.movementX)}\n      onDragEnd={(e) => setSelected((prev) => (e.movementX < start ? (prev + 1) % length : Math.abs(prev - 1) % length))}\n      onTouchStart={(e) => (start = e.touches[0].pageX)}\n      onTouchEnd={(e) => setSelected((prev) => (e.changedTouches[0].pageX < start ? (prev + 1) % length : Math.abs(prev - 1) % length))}\n      className=\"flex-center w-full flex-col gap-12\"\n    >\n      <Image\n        width={300}\n        height={300}\n        priority\n        sizes=\"600px\"\n        src={value[selected] || DEFAULT_IMAGE}\n        alt={`${selected + 1}번째 본문 이미지`}\n        className=\"h-300 rounded-md object-cover\"\n        aria-hidden={true}\n      />\n      <div className=\"flex-center w-full gap-20\">\n        {value.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => setSelected(index)}\n            className={`h-8 rounded-full transition-all ${index === selected ? 'basis-160 bg-black-80' : 'basis-60 bg-black-40'}`}\n            aria-current={index === selected}\n            aria-label={`${index}번째 이미지 바로가기`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nexport default InformationImage;\n",
  "src/components/paper_main/InformationTable.tsx": "import { ReactNode } from 'react';\n\nconst InformationTable = ({ children }: { children: ReactNode }) => {\n  return (\n    <section className=\"flex-center flex-col rounded-md bg-white px-24 py-8 shadow-lg [&>div:nth-of-type(1)]:border-0\" aria-label=\"문서 정보\">\n      {children}\n    </section>\n  );\n};\nexport default InformationTable;\n",
  "src/components/paper_main/MyRating.tsx": "'use client';\n\nimport { RATING_MSG } from '@/constants/default';\nimport useFetchedState from '@/hooks/useFetchedState';\nimport { Paper, Rating } from '@/types/data';\nimport { getLocalStorage } from '@/utils/browserStorage';\nimport { useEffect, useState } from 'react';\nimport MyRatingSelector from '@/components/paper_main/MyRatingSelector';\n\ninterface Props {\n  initialRating?: Rating;\n  paperRating?: Paper['rating'];\n  paperId: string;\n}\n\nconst MyRating = ({ initialRating, paperRating, paperId }: Props) => {\n  const [rating, setRating] = useState(initialRating ?? (-1 as Rating));\n  useEffect(() => {\n    const unAuthUserRating = getLocalStorage(`r${paperId}`);\n    if (unAuthUserRating) {\n      setRating(unAuthUserRating);\n    }\n  }, []);\n\n  return (\n    <section className=\"flex-center relative grow flex-col rounded-md bg-white p-20 shadow-lg\" aria-label=\"문서 평가\">\n      <div className=\"mb-28 flex w-full gap-12\">\n        <p className=\"shrink-0 text-18 font-bold\">나의 평가</p>\n        <div className=\"h-full w-1 border-l border-black-60 \" />\n        <p className=\"grow text-center text-18 font-bold\">{RATING_MSG[rating]}</p>\n      </div>\n      <MyRatingSelector paperRating={paperRating} paperId={paperId} rating={rating} setRating={setRating} />\n    </section>\n  );\n};\nexport default MyRating;\n",
  "src/components/paper_main/MyRatingSelector.tsx": "import { RATING_MSG } from '@/constants/default';\nimport useDebounce from '@/hooks/useDebounce';\nimport { Paper, Rating } from '@/types/data';\nimport { setLocalStorage } from '@/utils/browserStorage';\nimport { getCookie } from '@/utils/cookie';\nimport { deleteData, postData } from '@/utils/fetching';\nimport { refreshTag } from '@/utils/revalidate';\nimport Image from 'next/image';\nimport toast from 'react-hot-toast';\n\ninterface Props {\n  paperRating?: Paper['rating'];\n  paperId: string;\n  rating: Rating;\n  setRating: (rating: Rating) => void;\n}\nconst MyRatingSelector = ({ paperRating, paperId, rating, setRating }: Props) => {\n  const changeRating = useDebounce(async (status: Rating) => {\n    const isSame = rating === status;\n    const newValue = isSame ? -1 : status;\n    setRating(newValue);\n\n    const isAuth = await getCookie('v_s');\n    if (!isAuth) {\n      setLocalStorage({ key: `r${paperId}`, value: newValue });\n      return;\n    }\n\n    try {\n      let res;\n      if (isSame) {\n        res = await deleteData({ path: `/paper/${paperId}/rating`, body: { rating } });\n      } else {\n        res = await postData({ path: `/paper/${paperId}/rating`, body: { rating: newValue } });\n      }\n      if (!res.error) {\n        toast.success('평가 반영 완료!');\n      } else {\n        setRating(rating);\n        toast.error('다시 시도해 주십시오.');\n      }\n      refreshTag(['myRating', 'search']);\n    } catch {\n      setRating(rating);\n    }\n  }, 500);\n\n  return (\n    <>\n      <div className=\"flex w-full justify-evenly\" role=\"group\" aria-label=\"평가 고르기\">\n        {RATINGS.map((status) => (\n          <button\n            type=\"button\"\n            onClick={() => changeRating(status)}\n            key={status}\n            className={`flex-center transform-active relative h-40 w-40 rounded-full ${rating === status ? 'bg-orange' : 'bg-black-20'}`}\n          >\n            {rating === status && <div className=\"absolute -top-12 left-1/2 mb-4 h-8 w-8 -translate-x-1/2 rounded-full bg-black-80\" />}\n            <Image width={24} height={24} src={`/icon/rate-${status}.svg`} alt={RATING_MSG[status]} />\n          </button>\n        ))}\n      </div>\n      {rating !== -1 && rating > -1 && paperRating && (\n        <span className=\"absolute bottom-4\">{paperRating?.[rating] ? `${paperRating[rating]}명과 같은 의견이에요!` : '첫 평가 감사합니다!'}</span>\n      )}\n    </>\n  );\n};\nexport default MyRatingSelector;\n\nconst RATINGS = [2, 1, 0] as const;\n",
  "src/components/paper_main/Share.tsx": "'use client';\n\nimport IconBase from '@/components/common/IconBase';\nimport IconShare from 'public/icon/share.svg';\n\nconst Share = () => {\n  const popupShare = () => {\n    navigator.share({\n      url: document.location.href,\n      title: '',\n    });\n  };\n\n  return (\n    <section className=\"flex min-w-72 max-w-100 justify-center rounded-md bg-white text-black-80 shadow-lg\" aria-label=\"문서 공유\">\n      <button onClick={popupShare} className=\"flex flex-col items-center justify-between gap-8 pb-28 pt-20\">\n        <p className=\"text-18 font-bold\">공유</p>\n        <IconBase render={IconShare} name=\"\" fontSize={14} />\n      </button>\n    </section>\n  );\n};\nexport default Share;\n",
  "src/components/paper_main/Users.tsx": "import { Paper } from '@/types/data';\nimport UsersComment from '@/components/paper_main/UsersComment';\nimport UsersWriter from '@/components/paper_main/UsersWriter';\n\ninterface Props {\n  data: Paper;\n}\n\nconst Users = ({ data }: Props) => {\n  return (\n    <section className=\"flex-center relative grow flex-col gap-20 rounded-md bg-white p-20 shadow-lg\" aria-label=\"유저 의견\">\n      <UsersWriter name={data.writer.nickname} createdAt={data.createdAt} paperId={data._id} />\n      <UsersComment paperId={data._id} />\n    </section>\n  );\n};\nexport default Users;\n",
  "src/components/paper_main/UsersComment.tsx": "import { getCookie } from '@/utils/cookie';\nimport { getData } from '@/utils/fetching';\nimport UsersCommentView from '@/components/paper_main/UsersCommentView';\n\ninterface Props {\n  paperId: string;\n}\n\nconst UsersComment = async ({ paperId }: Props) => {\n  const session = await getCookie('v_s');\n  const commentData = await getData({ path: `/paper/${paperId}/comment`, queryKey: [`${paperId}/comment`] });\n  return (\n    <article className=\"flex w-full flex-col gap-12 pb-12\" role=\"group\" aria-label=\"댓글 목록\">\n      <h2 className=\"text-18 font-bold\">댓글</h2>\n      <UsersCommentView data={commentData.error ? null : commentData} session={session} />\n    </article>\n  );\n};\nexport default UsersComment;\n",
  "src/components/paper_main/UsersCommentInput.tsx": "'use client';\n\nimport { TargetComment } from '@/types/data';\nimport { postData, putData } from '@/utils/fetching';\nimport { refreshTag } from '@/utils/revalidate';\nimport { useParams } from 'next/navigation';\nimport { ChangeEvent, FormEvent, useEffect, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport AuthButton from '@/components/common/AuthButton';\nimport AuthSign from '@/components/common/AuthSign';\n\ninterface Props {\n  sessionName?: string;\n  targetComment?: TargetComment;\n  resetTarget: () => void;\n}\nconst UsersCommentInput = ({ sessionName, targetComment, resetTarget }: Props) => {\n  const params = useParams();\n\n  const isRecomment = targetComment?.status === 'recomment';\n  const isEdit = targetComment?.status === 'edit';\n  const [content, setContent] = useState('');\n\n  useEffect(() => {\n    if (isEdit) {\n      setContent(targetComment.comment.content);\n    }\n  }, [isEdit, targetComment?.comment.content]);\n\n  const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    setContent(e.target.value);\n  };\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    if (!content) {\n      return;\n    }\n    try {\n      const { paperId } = params;\n      let res;\n      if (isRecomment) {\n        const recommentId = targetComment?.comment._id;\n        res = await postData({ path: `/paper/${paperId}/comment`, body: { content, recommentId } });\n      } else if (isEdit) {\n        const editId = targetComment?.comment._id;\n        res = await putData({ path: `/paper/${paperId}/comment`, body: { content, editId } });\n      } else {\n        res = await postData({ path: `/paper/${paperId}/comment`, body: { content } });\n      }\n\n      if (res.error) {\n        throw Error(res.error);\n      }\n\n      setContent('');\n      resetTarget();\n      refreshTag(`${paperId}/comment`);\n    } catch (e) {\n      console.error(e);\n      toast.error('다시 시도해 주십시오.');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"relative w-full\">\n      <div className=\"mb-8 flex items-baseline justify-between\">\n        <label htmlFor=\"comment\" className=\"flex flex-wrap items-baseline gap-4 text-16 font-bold\">\n          {sessionName ?? <AuthSign />}\n          {sessionName && isRecomment && <span className=\"rounded-full bg-black-20 px-12\">{targetComment.comment.commenter.nickname}님께 답글</span>}\n          {sessionName && isEdit && <span className=\"rounded-full bg-black-20 px-12\">수정 중</span>}\n        </label>\n        <button\n          disabled={!content}\n          className={`${content ? 'bg-black-80 text-white' : 'border-black-60 text-black-80'} shrink-0 rounded-[0.8rem] border px-8 py-4 text-14`}\n          aria-label=\"댓글 제출하기\"\n        >\n          작성 완료\n        </button>\n      </div>\n      <textarea\n        id=\"comment\"\n        value={content}\n        disabled={!sessionName}\n        onChange={handleChange}\n        className=\"h-80 w-full rounded-sm border border-black-80 p-8 text-16\"\n      />\n      {!sessionName && (\n        <div className=\"absolute left-1/2 top-2/3 -translate-x-1/2 -translate-y-1/2\">\n          <AuthButton />\n        </div>\n      )}\n    </form>\n  );\n};\nexport default UsersCommentInput;\n",
  "src/components/paper_main/UsersCommentItem.tsx": "import useDeleteComment from '@/hooks/useDeleteComment';\nimport { Comment } from '@/types/data';\nimport { Session } from '@/types/session';\nimport { timeDiff } from '@/utils/timeDiff';\nimport { FunctionComponent, useMemo } from 'react';\n\ninterface Props {\n  comment: Comment;\n  session: Session;\n  onSuccess?: () => void;\n  isEdited: boolean;\n  ButtonEdit: FunctionComponent<{ comment: Comment; isEdited: boolean }>;\n}\n\nconst UsersCommentItem = ({ comment, session, onSuccess, isEdited, ButtonEdit }: Props) => {\n  const { ButtonDelete, ModalDelete } = useDeleteComment({\n    body: { deleteId: comment._id },\n    onSuccess,\n  });\n\n  const isCommenter = useMemo(() => session?.nickname === comment.commenter.nickname, []);\n\n  if (!comment) {\n    return null;\n  }\n\n  return (\n    <div className={`${isEdited ? 'opacity-50' : ''} flex flex-col`}>\n      <div className=\"flex items-center gap-8\">\n        <h3 className=\"text-center text-16 font-bold\">{comment.commenter?.nickname}</h3>\n        <span className=\"text-12 text-black-60\">{timeDiff(comment.createdAt)}</span>\n        {isCommenter && (\n          <>\n            <ButtonEdit comment={comment} isEdited={isEdited} />\n            <ButtonDelete />\n          </>\n        )}\n      </div>\n      <p className=\"mb-8 whitespace-pre-wrap text-16\">{comment.content}</p>\n      <ModalDelete />\n    </div>\n  );\n};\nexport default UsersCommentItem;\n",
  "src/components/paper_main/UsersCommentView.tsx": "'use client';\n\nimport useEditComment from '@/hooks/useEditComment';\nimport { Comment } from '@/types/data';\nimport { Session } from '@/types/session';\nimport UsersCommentInput from '@/components/paper_main/UsersCommentInput';\nimport UsersCommentItem from '@/components/paper_main/UsersCommentItem';\nimport UsersRecomment from '@/components/paper_main/UsersRecomment';\n\ninterface Props {\n  data: Comment[];\n  session: Session;\n}\n\nconst UsersCommentView = ({ data, session }: Props) => {\n  const { targetComment, resetTarget, setRecomment, ButtonEdit } = useEditComment();\n  return (\n    <>\n      {data?.map((comment) => {\n        const isEdited = targetComment?.status === 'edit' && targetComment.comment._id === comment._id;\n        const isSeleted = targetComment?.status === 'recomment' && targetComment.comment._id === comment._id;\n\n        return (\n          <div key={comment._id} className=\"animate-fadeIn\">\n            <UsersCommentItem session={session} comment={comment} isEdited={isEdited} ButtonEdit={ButtonEdit} />\n            <UsersRecomment\n              session={session}\n              originId={comment._id}\n              commentData={comment}\n              isSelected={isSeleted}\n              setRecomment={setRecomment}\n              targetComment={targetComment}\n              ButtonEdit={ButtonEdit}\n            />\n          </div>\n        );\n      })}\n      <UsersCommentInput sessionName={session?.nickname} targetComment={targetComment} resetTarget={resetTarget} />\n    </>\n  );\n};\nexport default UsersCommentView;\n",
  "src/components/paper_main/UsersRecomment.tsx": "import { Comment, TargetComment } from '@/types/data';\nimport { Session } from '@/types/session';\nimport { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport UsersRecommentItem from '@/components/paper_main/UsersRecommentItem';\n\ninterface Props {\n  session: Session;\n  commentData: Comment;\n  originId: string;\n  isSelected: boolean;\n  setRecomment: (comment: Comment) => () => void;\n  targetComment?: TargetComment;\n  ButtonEdit: FunctionComponent<{ comment: Comment; isEdited: boolean }>;\n}\nconst UsersRecomment = ({ session, commentData, originId, isSelected, setRecomment, targetComment, ButtonEdit }: Props) => {\n  const [open, setOpen] = useState(false);\n  const recommentLength = commentData.recomment.length;\n  return (\n    <div className=\"flex flex-col gap-12 border-b border-black-20 pb-12\">\n      <div className=\"flex justify-between \">\n        <button\n          onClick={setRecomment(commentData)}\n          disabled={!session}\n          className={`${isSelected ? ' text-sky' : ''} text-12 font-bold`}\n          aria-label=\"대댓글 달기\"\n        >\n          {isSelected ? '답글 취소' : '답글 달기'}\n        </button>\n        {!!recommentLength && (\n          <button onClick={() => setOpen(!open)} className=\"ml-auto w-max text-12 font-bold text-sky\" aria-label=\"답글 보기\">\n            {open ? '답글 접어두기' : `${recommentLength}개의 답글 더 보기`}\n          </button>\n        )}\n      </div>\n      {open &&\n        commentData.recomment.map((r) => (\n          <UsersRecommentItem\n            key={r._id}\n            session={session}\n            comment={r}\n            originId={originId}\n            isEdited={targetComment?.status === 'edit' && targetComment.comment._id === r._id}\n            ButtonEdit={ButtonEdit}\n          />\n        ))}\n    </div>\n  );\n};\nexport default UsersRecomment;\n",
  "src/components/paper_main/UsersRecommentItem.tsx": "import useDeleteComment from '@/hooks/useDeleteComment';\nimport { Comment } from '@/types/data';\nimport { Session } from '@/types/session';\nimport { timeDiff } from '@/utils/timeDiff';\nimport { FunctionComponent, useMemo } from 'react';\nimport IconReply from 'public/icon/reply.svg';\n\ninterface Props {\n  session: Session;\n  comment: Comment;\n  originId: string;\n  isEdited: boolean;\n  ButtonEdit: FunctionComponent<{ comment: Comment; isEdited: boolean }>;\n}\n\nconst UsersRecommentItem = ({ session, comment, originId, isEdited, ButtonEdit }: Props) => {\n  const { ButtonDelete, ModalDelete } = useDeleteComment({ body: { deleteId: comment._id, originId } });\n  const isCommenter = useMemo(() => session?.nickname === comment.commenter.nickname, []);\n\n  return (\n    <div className={`${isEdited ? 'opacity-30' : ''} flex animate-fadeIn gap-4`}>\n      <IconReply />\n      <div className=\"flex w-full flex-col\">\n        <div className=\"flex items-center gap-8\">\n          <h3 className=\"text-center text-14 font-bold\">{comment.commenter?.nickname}</h3>\n          <span className=\"text-black-60\">{timeDiff(comment.createdAt)}</span>\n          {isCommenter && (\n            <>\n              <ButtonEdit comment={comment} isEdited={isEdited} />\n              <ButtonDelete />\n            </>\n          )}\n        </div>\n        <p className=\"whitespace-pre-wrap text-14\">{comment.content}</p>\n      </div>\n      <ModalDelete />\n    </div>\n  );\n};\nexport default UsersRecommentItem;\n",
  "src/components/paper_main/UsersWriter.tsx": "import { timeDiff } from '@/utils/timeDiff';\nimport UsersWriterEditButton from '@/components/paper_main/UsersWriterEditButton';\n\ninterface Props {\n  name: string;\n  createdAt: string;\n  paperId: string;\n}\n\nconst UsersWriter = ({ name, createdAt, paperId }: Props) => {\n  return (\n    <article className=\"w-full border-b border-black-20 pb-24\">\n      <div className=\"mb-8 flex justify-between\">\n        <h2 className=\"text-18 font-bold\">작성자</h2>\n        <UsersWriterEditButton paperId={paperId} />\n      </div>\n      <div className=\"flex items-baseline gap-8\">\n        <h3 className=\"text-16 font-bold\">{name}</h3>\n        <span className=\"text-12 text-black-60\">{timeDiff(createdAt)} 작성됨.</span>\n      </div>\n    </article>\n  );\n};\nexport default UsersWriter;\n",
  "src/components/paper_main/UsersWriterEditButton.tsx": "import { getCookie } from '@/utils/cookie';\nimport { getSSR } from '@/utils/fetching';\nimport Link from 'next/link';\n\ninterface Props {\n  paperId: string;\n}\n\nconst UsersWriterEditButton = async ({ paperId }: Props) => {\n  const session = await getCookie('v_s');\n  let isWriter = false;\n  if (session) {\n    const res = await getSSR({ path: `/paper/${paperId}/writer` });\n    if (!res?.error) {\n      isWriter = res;\n    }\n  }\n  return (\n    <Link\n      href={isWriter ? `/paper/${paperId}/edit` : ''}\n      scroll={isWriter || false}\n      className={\n        isWriter ? 'transform-active flex-center gap-8 rounded-xs border bg-black-80 px-12 py-4 text-14 text-white transition-all' : 'hidden'\n      }\n    >\n      편집하기\n    </Link>\n  );\n};\nexport default UsersWriterEditButton;\n",
  "src/components/paper_main/informationRow.tsx": "import { ReactNode } from 'react';\n\nconst InformationRow = ({ label, children }: { label?: string; children: ReactNode }) => {\n  return (\n    <div className=\"flex w-full items-start gap-48 border-t border-solid border-black-20 py-12\">\n      {!!label && <h2 className=\"w-60 shrink-0 text-16 text-black-80\">{label}</h2>}\n      {children}\n    </div>\n  );\n};\nexport default InformationRow;\n",
  "src/components/search_header/CategorySelector.tsx": "'use client';\n\nimport { CATEGORY_KEY } from '@/constants/category';\nimport { SP_CATEGORY } from '@/constants/default';\nimport useChangeQuery from '@/hooks/useChangeQuery';\nimport { useDraggable } from '@/hooks/useDragScroll';\nimport { Suspense, memo, useRef, useState } from 'react';\nimport CategorySelectorItem from '@/components/search_header/CategorySelectorItem';\n\nconst CategorySelector = memo(function CategorySelector() {\n  return (\n    <Suspense>\n      <CategorySelect />\n    </Suspense>\n  );\n});\nexport default CategorySelector;\n\nconst CategorySelect = () => {\n  const { searchParams } = useChangeQuery();\n  const [selected, setSelected] = useState(() => searchParams.get(SP_CATEGORY) ?? '');\n\n  const dragRef = useRef<HTMLDivElement>(null);\n  const handler = useDraggable(dragRef);\n\n  return (\n    <section\n      className=\"relative flex h-96 gap-12 [&>div]:rounded-md [&>div]:bg-white [&>div]:p-12 [&>div]:shadow-md\"\n      role=\"group\"\n      aria-label=\"검색 결과를 필터링하는 카테고리 선택\"\n    >\n      <div className=\"transform-active\">\n        {selected ? <CategorySelectorItem name={selected} setSelected={setSelected} isSelected /> : <NoSelected />}\n      </div>\n      <div ref={dragRef} {...handler} className=\"flex overflow-scroll\">\n        {CATEGORY_KEY.filter((key) => key !== selected).map((key) => (\n          <CategorySelectorItem key={key} name={key} setSelected={setSelected} />\n        ))}\n      </div>\n    </section>\n  );\n};\n\nconst NoSelected = () => {\n  return (\n    <div className=\"flex-center h-full w-60 text-center text-12 font-medium text-black-80\">\n      <p>\n        설정된\n        <br />\n        카테고리\n        <br />\n        없음\n      </p>\n    </div>\n  );\n};\n",
  "src/components/search_header/CategorySelectorItem.tsx": "import { CATEGORY } from '@/constants/category';\nimport { SP_CATEGORY } from '@/constants/default';\nimport useChangeQuery from '@/hooks/useChangeQuery';\nimport IconBase from '@/components/common/IconBase';\n\ninterface Props {\n  name: string;\n  isSelected?: boolean;\n  setSelected: (name: string) => void;\n}\n\nconst CategorySelectorItem = ({ name, isSelected, setSelected }: Props) => {\n  const { changeQuery } = useChangeQuery();\n  const handleClick = () => {\n    const updatedValue = isSelected ? '' : name;\n    setSelected(updatedValue);\n    changeQuery({ name: SP_CATEGORY, value: updatedValue });\n  };\n  return (\n    <button onClick={handleClick} className={`flex-center w-60 shrink-0 flex-col ${isSelected ? 'text-black-100' : 'text-black-100'}`}>\n      <IconBase render={CATEGORY[name]} name={name} fontSize={12} />\n      {isSelected && <span className=\"font-bold text-sky\">초기화 하기</span>}\n    </button>\n  );\n};\nexport default CategorySelectorItem;\n",
  "src/components/search_header/SearchBar.tsx": "'use client';\n\nimport { INPUT_PLACEHODER, SP_KEYWORD } from '@/constants/default';\nimport useChangeQuery from '@/hooks/useChangeQuery';\nimport Image from 'next/image';\nimport { ChangeEvent, FormEvent, Suspense, memo, useEffect, useState } from 'react';\nimport IconBackspace from 'public/icon/backspace.svg';\n\nconst SearchBar = memo(function SearchBar() {\n  return (\n    <Suspense>\n      <SearchInput />\n    </Suspense>\n  );\n});\nexport default SearchBar;\n\nconst SearchInput = () => {\n  const { changeQuery, searchParams } = useChangeQuery();\n  const initial = searchParams.get(SP_KEYWORD) ?? '';\n  const [value, setValue] = useState(initial);\n\n  useEffect(() => {\n    setValue(initial);\n  }, [initial]);\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value);\n  };\n\n  const resetKeyword = () => {\n    setValue('');\n  };\n\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    changeQuery({ name: SP_KEYWORD, value });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"relative w-full\" aria-label=\"검색어 입력\">\n      <input\n        value={value}\n        onChange={handleChange}\n        type=\"search\"\n        placeholder={INPUT_PLACEHODER}\n        className=\"h-48 w-full rounded-full bg-white pl-48 text-16 font-bold shadow-sm\"\n      />\n      <Image\n        width={22}\n        height={22}\n        src=\"/icon/search.svg\"\n        alt=\"검색 아이콘\"\n        className=\"absolute left-16 top-1/2 -translate-y-1/2\"\n        aria-hidden={true}\n      />\n      <button\n        type=\"button\"\n        onClick={resetKeyword}\n        disabled={!value}\n        className={`absolute right-16 top-1/2 -translate-y-1/2 first:h-16 first:w-16 ${value ? 'first: text-black-100' : 'text-black-80'}`}\n        aria-label=\"검색어 지우기\"\n      >\n        <IconBackspace />\n      </button>\n    </form>\n  );\n};\n",
  "src/components/search_main/SearchFallback.tsx": "const SearchFallback = () => {\n  return (\n    <>\n      <h1 className=\"mb-4 ml-20 text-18 font-bold\">검색 중...</h1>\n      <div className=\"flex flex-grow flex-col gap-12\">\n        {[1, 2, 3].map((v) => (\n          <div key={v} className=\"transform-active flex h-max w-full animate-pulse gap-28 rounded-sm bg-white py-12\">\n            <div className=\"ml-20 h-100 w-100 shrink-0 rounded-sm bg-black-0\" />\n            <div className=\"mt-8 h-16 w-100 bg-black-0\" />\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\nexport default SearchFallback;\n",
  "src/components/search_main/SearchResult.tsx": "'use client';\n\nimport { getSessionStorage } from '@/utils/browserStorage';\nimport { ReactNode, useEffect } from 'react';\nimport ApiErrorBoundary from '@/components/errorHandling/ApiErrorBoundary';\n\ninterface Props {\n  children: ReactNode;\n}\n\nconst SearchResult = ({ children }: Props) => {\n  useEffect(() => {\n    const scroll = getSessionStorage('scroll');\n    if (scroll) {\n      window.scrollTo({ top: scroll });\n    }\n  }, []);\n\n  return <ApiErrorBoundary>{children}</ApiErrorBoundary>;\n};\nexport default SearchResult;\n",
  "src/components/search_main/SearchResultEmpty.tsx": "import { getCookie } from '@/utils/cookie';\nimport AuthButton from '@/components/common/AuthButton';\nimport LinkBase from '@/components/common/LinkBase';\nimport IconPencil from 'public/icon/pencil.svg';\n\nconst SearchResultEmpty = () => {\n  return (\n    <div className=\"flex flex-grow animate-fadeIn flex-col\">\n      <h2 className=\"flex-center w-full flex-grow text-24 font-bold\">일치하는 문서가 없습니다.</h2>\n      <div className=\"flex flex-col items-start gap-8 border-t border-solid border-black-100 p-20\">\n        <h3 className=\"text-18 font-bold\">제안</h3>\n        <p className=\"text-14 font-medium\">검색 결과가 없다면, 새로운 문서를 생성해 주세요!</p>\n        <LoginOrWrite />\n      </div>\n    </div>\n  );\n};\nexport default SearchResultEmpty;\n\nconst LoginOrWrite = async () => {\n  const session = await getCookie('v_s');\n\n  return session ? (\n    <LinkBase\n      href={session ? '/write' : '#'}\n      className={`${session ? '' : 'active:bg-orange active:font-bold active:text-black-100'} transform-active w-max text-14 text-white`}\n    >\n      <IconPencil />\n      <span>문서 작성하기</span>\n    </LinkBase>\n  ) : (\n    <AuthButton />\n  );\n};\n",
  "src/components/search_main/SearchResultItem.tsx": "import { DEFAULT_IMAGE } from '@/constants/default';\nimport { SearchItem } from '@/types/data';\nimport Image from 'next/image';\nimport ItemRating from '@/components/common/ItemRating';\nimport SearchResultItemLink from '@/components/search_main/SearchResultItemLink';\nimport IconPageview from 'public/icon/pageview.svg';\n\nconst SearchResultItem = ({ _id, imageUrl, title, hashtag, rated, end, view, rating }: SearchItem) => {\n  return (\n    <SearchResultItemLink _id={_id} end={end}>\n      <div className=\"relative h-100 w-100 shrink-0\">\n        <Image\n          fill\n          sizes=\"100px\"\n          src={typeof imageUrl === 'string' ? imageUrl : imageUrl[0] ?? DEFAULT_IMAGE}\n          alt=\"\"\n          className=\"rounded-sm object-cover\"\n          aria-hidden={true}\n        />\n      </div>\n      <div className=\"flex h-100 flex-grow justify-between gap-12 py-12\">\n        <ItemTitle title={title.length > 12 ? title.slice(0, 12) + '...' : title} hashtag={hashtag} />\n        <div className=\"flex w-48 shrink-0 flex-col items-center text-12 font-bold\">\n          {view ? (\n            <>\n              <IconPageview />\n              <span>{view}</span>\n            </>\n          ) : (\n            <RatingChecker rating={rating} rated={rated} />\n          )}\n        </div>\n      </div>\n      {end && <p className=\"absolute left-32 text-18 font-bold\">판매종료</p>}\n    </SearchResultItemLink>\n  );\n};\nexport default SearchResultItem;\n\nconst ItemTitle = ({ title, hashtag = [] }: Pick<SearchItem, 'title' | 'hashtag'>) => {\n  const tags = hashtag.reduce((acc, cur) => acc + ' ' + cur, '');\n  return (\n    <div className=\"flex h-full flex-col justify-between\">\n      <h2 className=\"text-18 font-bold\">{title}</h2>\n      {!!hashtag && (\n        <div className=\"text-12\" role=\"group\" aria-label=\"해시태그\">\n          {tags.length > 25 ? tags.slice(0, 25) + '...' : tags}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst RatingChecker = ({ rated, rating }: Pick<SearchItem, 'rated' | 'rating'>) => {\n  return rating?.length ? (\n    <ItemRating rating={rated} />\n  ) : (\n    <p className=\"text-10 text-center font-medium text-black-100\">\n      평가하기\n      <br />\n      <span className=\"text-12\">→</span>\n    </p>\n  );\n};\n",
  "src/components/search_main/SearchResultItemLink.tsx": "'use client';\n\nimport { PREVIOUS_PATH } from '@/constants/default';\nimport useChangeQuery from '@/hooks/useChangeQuery';\nimport { setSessionStorage } from '@/utils/browserStorage';\nimport Link from 'next/link';\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { ReactNode } from 'react';\n\ninterface Props {\n  _id: string;\n  end: boolean;\n  children: ReactNode;\n}\n\nconst SearchResultItemLink = ({ _id, end, children }: Props) => {\n  const path = usePathname();\n  const searchParams = useSearchParams();\n  const query = searchParams.toString();\n  const savePath = () => {\n    setSessionStorage({ key: PREVIOUS_PATH, value: path + (query ? '?' + query : '') });\n    setSessionStorage({ key: 'scroll', value: window.scrollY });\n  };\n  return (\n    <Link\n      href={`/paper/${_id}`}\n      onClick={savePath}\n      className={`${end && 'relative bg-black-0 [&>div]:opacity-30'} flex-center transform-active h-max w-full animate-fadeIn gap-28 py-12`}\n    >\n      {children}\n    </Link>\n  );\n};\nexport default SearchResultItemLink;\n",
  "src/components/search_main/SearchResultItemList.tsx": "import { SearchItem } from '@/types/data';\nimport { Fragment, Suspense } from 'react';\nimport SearchResultItem from '@/components/search_main/SearchResultItem';\n\ninterface Props {\n  data: SearchItem[];\n  my?: boolean;\n}\n\nconst SearchResultItemList = ({ data, my = false }: Props) => {\n  return (\n    <Suspense>\n      <div className={`${my ? '' : 'rounded-md px-16 shadow-lg'} flex w-full flex-col bg-white`} role=\"group\">\n        {data.map((data, i) => (\n          <Fragment key={data._id}>\n            {!i || <hr className=\"border-black-60\" />}\n            <SearchResultItem {...data} />\n          </Fragment>\n        ))}\n      </div>\n    </Suspense>\n  );\n};\nexport default SearchResultItemList;\n",
  "src/components/search_main/SearchResultReset.tsx": "import Link from 'next/link';\n\nconst SearchResultReset = () => {\n  return (\n    <Link\n      href=\"/search\"\n      className=\"transform-active ml-8 rounded-full bg-black-100 px-8 py-4 text-12 font-bold text-white\"\n      aria-label=\"검색 결과 초기화\"\n    >\n      검색 초기화\n    </Link>\n  );\n};\nexport default SearchResultReset;\n",
  "src/components/search_main/SearchResultView.tsx": "import { SearchItem } from '@/types/data';\nimport { getData } from '@/utils/fetching';\nimport SearchResultEmpty from '@/components/search_main/SearchResultEmpty';\nimport SearchResultItemList from '@/components/search_main/SearchResultItemList';\nimport SearchResultReset from '@/components/search_main/SearchResultReset';\n\ninterface Props {\n  c?: string;\n  k?: string;\n}\n\nconst SearchResultView = async ({ c, k }: Props) => {\n  const data: SearchItem[] = await getData({\n    path: `/paper?${c ? `c=${c}` : ''}&${k ? `k=${encodeURIComponent(k)}` : ''}`,\n    queryKey: ['search'],\n  });\n\n  return (\n    <section className=\"flex flex-grow flex-col\" aria-label=\"검색 목록\">\n      <div className=\"mb-12 ml-20 flex flex-wrap items-center justify-between\">\n        <h1 className=\"text-18 font-bold\">{setLabel(data, c, k)}</h1>\n        {data && (!!c || !!k) && <SearchResultReset />}\n      </div>\n      {data?.length ? <SearchResultItemList data={data} /> : <SearchResultEmpty />}\n    </section>\n  );\n};\nexport default SearchResultView;\n\nconst setLabel = (data: SearchItem[], c?: string, k?: string) => {\n  const length = data?.length || 0;\n  if (c && k) {\n    return `${c}: \"${k}\" 검색 결과(${length})`;\n  } else if (c) {\n    return `${c}: 검색 결과(${length})`;\n  } else if (k) {\n    return `\"${k}\" 검색 결과(${length})`;\n  } else if (length) {\n    return '최근 작성된 문서';\n  }\n};\n",
  "src/components/write_main/WriteCategory.tsx": "import { CATEGORY, CATEGORY_KEY } from '@/constants/category';\nimport { SetSubmitData } from '@/constants/default';\nimport { memo } from 'react';\nimport IconBase from '@/components/common/IconBase';\nimport WriteFormRow from '@/components/write_main/WriteFormRow';\n\ninterface Props {\n  category: string[];\n  setCategory: SetSubmitData;\n}\n\nconst WriteCategory = memo(function WriteCategory({ category, setCategory }: Props) {\n  const handleClick = (isSelected: boolean, key: string) => {\n    if (isSelected) {\n      setCategory((prev) => ({ ...prev, category: prev.category.filter((v) => v !== key) }));\n      return;\n    }\n    setCategory((prev) => ({ ...prev, category: [...prev.category, key] }));\n  };\n  return (\n    <WriteFormRow label=\"카테고리\" required={!category.length}>\n      <div className=\"flex flex-wrap gap-8\">\n        {CATEGORY_KEY.slice(2).map((key, i) => {\n          const isSelected = category?.includes(key);\n          return (\n            <button\n              type=\"button\"\n              onClick={() => handleClick(isSelected, key)}\n              key={i}\n              className={`flex-center transform-active w-60 shrink-0 flex-col transition duration-300 ${isSelected ? 'text-black-100' : 'text-black-40'}`}\n            >\n              <IconBase render={CATEGORY[key]} name={key} fontSize={12} />\n            </button>\n          );\n        })}\n      </div>\n    </WriteFormRow>\n  );\n});\nexport default WriteCategory;\n",
  "src/components/write_main/WriteDescription.tsx": "import { SetSubmitData } from '@/constants/default';\nimport useDebounce from '@/hooks/useDebounce';\nimport useUncontrolInput from '@/hooks/useUncontrolInput';\nimport { memo } from 'react';\nimport WriteFormRow from '@/components/write_main/WriteFormRow';\n\ninterface Props {\n  description: string;\n  setDescription: SetSubmitData;\n}\n\nconst WriteDescription = memo(function WriteDescription({ description, setDescription }: Props) {\n  const { ref, refCallback } = useUncontrolInput<HTMLTextAreaElement>(description);\n  const handleChange = useDebounce(() => {\n    setDescription((prev) => ({ ...prev, description: ref.current?.value! }));\n  }, 500);\n\n  return (\n    <WriteFormRow label=\"설명\" required={!description}>\n      <textarea\n        ref={refCallback}\n        defaultValue={description}\n        onChange={handleChange}\n        placeholder=\"비건, 비거니즘에 해당하는 이유, 근거를 작성해 주세요.\"\n        className=\"h-200 w-full rounded-sm border border-black-60 bg-transparent p-8 text-14 font-bold focus:outline-none\"\n      />\n    </WriteFormRow>\n  );\n});\nexport default WriteDescription;\n",
  "src/components/write_main/WriteForm.tsx": "'use client';\n\nimport { DEFAULT_SUBMIT, MAX_LEGNTH_IMAGE, SubmitData, SubmitInitial, WRITE_SAVE } from '@/constants/default';\nimport { getLocalStorage } from '@/utils/browserStorage';\nimport { postData, putData } from '@/utils/fetching';\nimport { refreshTag } from '@/utils/revalidate';\nimport { canRecall, canSave, required, saveSubmitData } from '@/utils/writeUtils';\nimport { useRouter } from 'next/navigation';\nimport { FormEvent, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport WriteCategory from '@/components/write_main/WriteCategory';\nimport WriteDescription from '@/components/write_main/WriteDescription';\nimport WriteHashtag from '@/components/write_main/WriteHashtag';\nimport WriteImage from '@/components/write_main/WriteImage';\nimport WriteSave from '@/components/write_main/WriteSave';\nimport WriteSubmit from '@/components/write_main/WriteSubmit';\nimport WriteTitle from '@/components/write_main/WriteTitle';\n\nconst toastPosition = {\n  position: 'bottom-center',\n} as const;\n\ninterface Props {\n  initial?: SubmitData;\n  paperId?: string;\n}\n\nconst WriteForm = ({ initial, paperId }: Props) => {\n  const [submitData, setSubmitData] = useState<SubmitData>(() => (initial ? initial : DEFAULT_SUBMIT));\n  const [reload, setReload] = useState(0);\n  const handleSave = () => {\n    try {\n      saveSubmitData(submitData);\n      setReload(reload + 1);\n      toast.success(\n        <p>\n          <strong>이미지를 제외</strong>한 정보가\n          <br />\n          <strong>10분</strong> 간 저장됩니다.\n        </p>,\n        toastPosition,\n      );\n    } catch {\n      toast.error('다시 시도해 주세요.', toastPosition);\n    }\n  };\n  const handleRecall = () => {\n    const prev = getLocalStorage(WRITE_SAVE);\n    if (prev) {\n      setSubmitData(prev);\n      toast.success('불러 오기 성공!', toastPosition);\n      return;\n    }\n    toast.error('다시 시도해 주세요.', toastPosition);\n  };\n\n  const router = useRouter();\n  const [pending, setPending] = useState(false);\n\n  const handleSubmit = async (e: FormEvent) => {\n    e.preventDefault();\n    if (pending) {\n      return;\n    }\n\n    try {\n      setPending(true);\n      const noImageData = { ...submitData, image: [] as boolean[] };\n\n      const formData = new FormData();\n      for (let index = 0; index < MAX_LEGNTH_IMAGE; index++) {\n        const image = submitData.image[index];\n        if (image === initial?.image[index]) {\n          noImageData.image[index] = false;\n          continue;\n        }\n        noImageData.image[index] = true;\n\n        if (image) {\n          formData.append('image', image);\n        }\n      }\n      formData.append('data', JSON.stringify(noImageData));\n\n      let res;\n      if (!initial) {\n        res = await postData({ path: '/paper', body: formData });\n      } else {\n        res = await putData({ path: `/paper/${paperId}`, body: formData });\n      }\n      if (!res || res.error) {\n        throw new Error(res.error || '응답이 없습니다.');\n      }\n\n      refreshTag(['search', 'myPaper', paperId || '']);\n      router.replace(`/paper/${res?.paperId}#top`);\n    } catch (e: any) {\n      toast.error('다시 시도해주십시오.');\n      console.error(e);\n      setPending(false);\n    }\n  };\n\n  return (\n    <form className=\"flex w-full flex-col [&>div:not(:first-child)]:mt-40\" aria-label=\"문서 작성\">\n      <WriteImage image={submitData.image} setImage={setSubmitData} />\n      <WriteTitle title={submitData.title} setTitle={setSubmitData} />\n      <WriteCategory category={submitData.category} setCategory={setSubmitData} />\n      <WriteHashtag hashtag={submitData.hashtag} setHashtag={setSubmitData} />\n      <WriteDescription description={submitData.description} setDescription={setSubmitData} />\n      <WriteSave canSave={canSave(submitData)} canRecall={canRecall(submitData)} handleSave={handleSave} handleRecall={handleRecall} />\n      <WriteSubmit required={required(submitData)} handleSubmit={handleSubmit} pending={pending} />\n    </form>\n  );\n};\nexport default WriteForm;\n",
  "src/components/write_main/WriteFormRow.tsx": "import { ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n  label?: string;\n  required?: boolean;\n}\n\nconst WriteFormRow = ({ children, label, required }: Props) => {\n  return (\n    <div className=\"flex min-h-56 gap-40 text-18 font-medium\">\n      <div className=\"w-68 shrink-0 \">\n        {!!label && <h2>{label}</h2>}\n        {required && <span className=\"align-top text-12 font-bold text-sky\">*필수입력</span>}\n      </div>\n      {children}\n    </div>\n  );\n};\nexport default WriteFormRow;\n",
  "src/components/write_main/WriteHashtag.tsx": "import { SetSubmitData } from '@/constants/default';\nimport useDebounce from '@/hooks/useDebounce';\nimport useUncontrolInput from '@/hooks/useUncontrolInput';\nimport Image from 'next/image';\nimport { memo, useEffect, useMemo } from 'react';\nimport WriteFormRow from '@/components/write_main/WriteFormRow';\n\nconst REG = /#[a-z0-9가-힣\\s]{1,8}$/;\n\ninterface Props {\n  hashtag: string[];\n  setHashtag: SetSubmitData;\n}\n\nconst WriteHashtag = memo(function WriteHashtag({ hashtag, setHashtag }: Props) {\n  const initial = hashtag.reduce((acc, cur) => acc + cur, '');\n  const { ref, refCallback } = useUncontrolInput<HTMLInputElement>(initial);\n\n  const handleChange = useDebounce(() => {\n    makeHashtag();\n  }, 500);\n\n  const makeHashtag = () => {\n    if (!ref.current) {\n      return;\n    }\n    let index = -1;\n    const tags: string[] = [];\n    const value = ref.current.value;\n    const length = value.length;\n    let newValue = '';\n\n    for (let i = 0; i < length; i++) {\n      const cur = value[i];\n      if (cur === ' ') {\n        continue;\n      }\n      if (cur === '#') {\n        index++;\n      }\n      if (index > -1) {\n        const tag = tags[index];\n        tags[index] = (tag ?? '') + cur;\n      }\n\n      newValue += cur;\n    }\n    const newTags = tags.filter((v) => REG.test(v));\n    setHashtag((prev) => ({ ...prev, hashtag: newTags }));\n    ref.current.value = newValue;\n  };\n\n  const deleteHashtag = (tag: string) => () => {\n    setHashtag((prev) => ({ ...prev, hashtag: prev.hashtag.filter((v) => v !== tag) }));\n\n    if (!ref.current) {\n      return;\n    }\n    const currentValue = ref.current.value;\n    ref.current.value = currentValue.replace(tag, '');\n  };\n\n  return (\n    <WriteFormRow label=\"해시태그\">\n      <div className=\"flex grow flex-col gap-8\">\n        <input\n          type=\"search\"\n          defaultValue={initial}\n          ref={refCallback}\n          onChange={handleChange}\n          placeholder=\"'#특징', '#검색어', '#브랜드'\"\n          className=\"webkit w-full border-b border-black-60 bg-transparent font-bold focus:outline-none\"\n        />\n        <div className=\"flex min-h-32 flex-wrap gap-8\">\n          {[...hashtag].map((tag) => (\n            <button\n              type=\"button\"\n              onClick={deleteHashtag(tag)}\n              className=\"flex-center h-32 animate-fadeIn gap-8 rounded-full border border-black-80 px-8 active:bg-black-80\"\n              key={tag}\n            >\n              {tag}\n              <Image width={10} height={10} src=\"/icon/cancel.svg\" alt=\"해시태그 삭제\" />\n            </button>\n          ))}\n        </div>\n      </div>\n    </WriteFormRow>\n  );\n});\nexport default WriteHashtag;\n",
  "src/components/write_main/WriteImage.tsx": "import { MAX_LEGNTH_IMAGE, SetSubmitData, SubmitData } from '@/constants/default';\nimport { useDraggable } from '@/hooks/useDragScroll';\nimport imageCompression from 'browser-image-compression';\nimport Image from 'next/image';\nimport { ChangeEvent, memo, useRef, useState } from 'react';\nimport toast from 'react-hot-toast';\nimport IconDelete from 'public/icon/delete.svg';\nimport IconPlus from 'public/icon/plus.svg';\n\ninterface Props {\n  image: SubmitData['image'];\n  setImage: SetSubmitData;\n}\n\nconst WriteImage = memo(function WriteImage({ image, setImage }: Props) {\n  const [thumbnail, setThumbnail] = useState<string[]>(() => (typeof image === 'string' ? [image] : (image as string[])));\n  const [mutateIndex, setMutateIndex] = useState(-1);\n\n  const handleChange = async (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files) {\n      return;\n    }\n    let count = thumbnail.length;\n\n    if (mutateIndex > -1) {\n      count = MAX_LEGNTH_IMAGE - 1;\n    }\n\n    for (const newFile of files) {\n      count++;\n      if (count > MAX_LEGNTH_IMAGE) {\n        toast.error(`${MAX_LEGNTH_IMAGE}장까지만 추가됩니다.`);\n        break;\n      }\n      if (!['image/png', 'image/jpg', 'image/jpeg'].includes(newFile.type)) {\n        toast.error('png, jpg, jpeg 확장자만 업로드 가능합니다.');\n        return;\n      }\n\n      const options = {\n        maxSizeMB: 0.2,\n        maxWidthOrHeight: 1920,\n        useWebWorker: true,\n      };\n      const compressedFile = await imageCompression(newFile, options);\n      const newThumbnail = URL.createObjectURL(newFile);\n      if (mutateIndex > -1) {\n        setImage((prev) => ({ ...prev, image: prev.image.map((v, i) => (i === mutateIndex ? compressedFile : v)) }));\n        setThumbnail((prev) => prev.map((v, i) => (i === mutateIndex ? newThumbnail : v)));\n        setMutateIndex(-1);\n      } else {\n        setImage((prev) => ({ ...prev, image: [...prev.image, compressedFile] }));\n        setThumbnail((prev) => [...prev, newThumbnail]);\n      }\n    }\n    e.target.value = '';\n  };\n\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const scrollHandler = useDraggable(scrollRef);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  return (\n    <div className=\"mb-12 flex w-full flex-col gap-8\">\n      <div className=\"flex h-40 items-baseline gap-8\">\n        <h2 className=\"text-18 font-medium\">이미지</h2>\n        <p className=\"text-12\">추가한 이미지를 눌러 삭제할 수 있습니다.</p>\n      </div>\n      <div ref={scrollRef} {...scrollHandler} className=\"flex gap-8 overflow-x-scroll\">\n        {thumbnail.map(\n          (v, i) =>\n            v && (\n              <div key={v} className=\"relative h-200 w-200 shrink-0\">\n                <Image\n                  onClick={() => (setMutateIndex(i), inputRef.current?.click())}\n                  fill\n                  sizes=\"200px\"\n                  src={v}\n                  tabIndex={0}\n                  alt={thumbnail ? '추가한 이미지 썸네일' : '기본 이미지'}\n                  className=\"rounded-md object-cover\"\n                />\n                {!i && <div className=\"absolute left-8 top-8 rounded-sm bg-black-100 px-8 py-4 text-white\">대표 이미지</div>}\n                <button\n                  onClick={() => {\n                    setImage((prev) => ({ ...prev, image: prev.image.filter((_, idx) => idx !== i) }));\n                    setThumbnail((prev) => prev.filter((_, idx) => idx !== i));\n                  }}\n                  type=\"button\"\n                  className=\"absolute right-8 top-8 rounded-md bg-black-100 p-8 text-white\"\n                >\n                  <IconDelete />\n                </button>\n              </div>\n            ),\n        )}\n        <label\n          htmlFor=\"image\"\n          onKeyDown={(e) => e.key === 'Enter' && inputRef.current?.click()}\n          className=\"transform-active flex-center text-balck-80 mx-auto h-200 w-full max-w-200 shrink-0 flex-col gap-8 rounded-sm border border-black-60 text-16\"\n          tabIndex={0}\n        >\n          <IconPlus />\n          <span>이미지 추가하기</span>\n        </label>\n      </div>\n      <input onChange={handleChange} ref={inputRef} id=\"image\" type=\"file\" multiple accept=\"image/png,.jpg,.jpeg\" hidden />\n    </div>\n  );\n});\nexport default WriteImage;\n",
  "src/components/write_main/WriteSave.tsx": "import { memo, useEffect, useState } from 'react';\nimport IconRecall from 'public/icon/recall.svg';\nimport IconSave from 'public/icon/save.svg';\n\ninterface Props {\n  canSave: boolean;\n  canRecall: boolean;\n  handleSave: () => void;\n  handleRecall: () => void;\n}\n\nconst WriteSave = memo(function WriteSave({ canSave, canRecall, handleSave, handleRecall }: Props) {\n  const [recall, setRecall] = useState(false);\n\n  useEffect(() => {\n    setRecall(canRecall);\n  }, [canRecall]);\n\n  return (\n    <div className=\"flex gap-20 text-18\">\n      <button\n        type=\"button\"\n        onClick={() => handleSave()}\n        disabled={!canSave}\n        className={`${canSave ? 'transform-active border-black-80' : 'border-black-40 text-black-40'} flex-center grow gap-12 rounded-sm border py-12 font-bold`}\n      >\n        <IconSave />\n        임시 저장\n      </button>\n      <button\n        type=\"button\"\n        onClick={handleRecall}\n        disabled={!recall}\n        className={`${recall ? 'transform-active border-black-80' : 'border-black-40 text-black-40'} flex-center grow gap-12 rounded-sm border py-12 font-bold`}\n      >\n        <IconRecall />\n        불러오기\n      </button>\n    </div>\n  );\n});\nexport default WriteSave;\n",
  "src/components/write_main/WriteSubmit.tsx": "import dynamic from 'next/dynamic';\nimport { FormEvent, memo, useState } from 'react';\nimport IconUpload from 'public/icon/upload.svg';\n\nconst WriteSubmitModal = dynamic(() => import('@/components/write_main/WriteSubmitModal'), { ssr: false });\n\ninterface Props {\n  required: boolean;\n  handleSubmit: (e: FormEvent) => void;\n  pending: boolean;\n}\n\nconst WriteSubmit = memo(function WriteSubmit({ required, handleSubmit, pending }: Props) {\n  const [modalOpen, setModalOpen] = useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        onClick={() => setModalOpen(true)}\n        disabled={!required}\n        className={`${required ? 'transform-active border-black-80 bg-black-100 text-white' : 'border-black-40 text-black-40'} flex-center mt-20 grow gap-12 rounded-sm border py-12 text-18 font-medium`}\n      >\n        <IconUpload />\n        작성 완료\n      </button>\n      {modalOpen && <WriteSubmitModal closeModal={() => setModalOpen(false)} handleSubmit={handleSubmit} pending={pending} />}\n    </>\n  );\n});\nexport default WriteSubmit;\n",
  "src/components/write_main/WriteSubmitModal.tsx": "import { ChangeEvent, FormEvent, useState } from 'react';\nimport ModalFrame from '@/components/common/ModalFrame';\nimport ModalPortal from '@/components/common/ModalPortal';\nimport IconUpload from 'public/icon/upload.svg';\n\ninterface Props {\n  closeModal: () => void;\n  handleSubmit: (e: FormEvent) => void;\n  pending: boolean;\n}\n\nconst WriteSubmitModal = ({ closeModal, handleSubmit, pending }: Props) => {\n  const [signed, setSigned] = useState({ sensored: false, edited: false });\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => setSigned((prev) => ({ ...prev, [e.target.name]: e.target.checked }));\n  return (\n    <ModalPortal>\n      <ModalFrame closeModal={closeModal}>\n        <h2 className=\"text-18 font-bold\">완료 전 확인하기</h2>\n        <button onClick={() => setSigned((prev) => ({ ...prev, sensored: !prev.sensored }))} className=\"my-20 flex gap-8\">\n          <input\n            name=\"sensored\"\n            checked={signed.sensored}\n            onChange={handleChange}\n            type=\"checkbox\"\n            className=\"transform-active mt-[0.5rem] h-16 w-16 shrink-0 rounded-lg accent-black-80\"\n            tabIndex={-1}\n            aria-hidden\n          />\n          <p className=\"text-start text-16 font-medium\">\n            부적절한 내용\n            <strong>(논비건, 욕설, 혐오발언)</strong>은 제보일로부터 3일 동안 해당 문서의 댓글에서 의견을 받은 뒤, 삭제 여부가 결정됩니다.\n          </p>\n        </button>\n        <button onClick={() => setSigned((prev) => ({ ...prev, edited: !prev.edited }))} className=\"my-20 flex gap-8\">\n          <input\n            name=\"edited\"\n            checked={signed.edited}\n            onChange={handleChange}\n            type=\"checkbox\"\n            className=\"transform-active mt-[0.5rem] h-16 w-16 shrink-0 rounded-lg accent-black-80\"\n            tabIndex={-1}\n            aria-hidden\n          />\n          <p className=\"text-start text-16 font-medium\">\n            <strong>이미지 추가, 공식 명칭 수정, 이벤트 해시태그 추가</strong>등의 수정이 이루어질 수 있습니다.\n          </p>\n        </button>\n        <button\n          onClick={handleSubmit}\n          disabled={!signed.sensored || !signed.edited || pending}\n          className={`${pending || (signed.sensored && signed.edited) ? 'transform-active border-black-80 bg-black-100 text-white' : 'border-black-40 text-black-40'} flex-center mt-auto gap-12 rounded-sm border py-12 text-18 font-medium`}\n        >\n          {pending ? (\n            '전송 중입니다...'\n          ) : (\n            <>\n              <IconUpload />\n              작성 완료\n            </>\n          )}\n        </button>\n      </ModalFrame>\n    </ModalPortal>\n  );\n};\nexport default WriteSubmitModal;\n",
  "src/components/write_main/WriteTitle.tsx": "import { SetSubmitData } from '@/constants/default';\nimport useDebounce from '@/hooks/useDebounce';\nimport useUncontrolInput from '@/hooks/useUncontrolInput';\nimport { memo } from 'react';\nimport WriteFormRow from '@/components/write_main/WriteFormRow';\n\ninterface Props {\n  title: string;\n  setTitle: SetSubmitData;\n}\nconst WriteTitle = memo(function WriteTitle({ title, setTitle }: Props) {\n  const { ref, refCallback } = useUncontrolInput<HTMLInputElement>(title);\n  const handleChange = useDebounce(() => {\n    setTitle((prev) => ({ ...prev, title: ref.current?.value! }));\n  }, 500);\n\n  return (\n    <WriteFormRow label=\"문서명\" required={!title}>\n      <input\n        ref={refCallback}\n        defaultValue={title}\n        onChange={handleChange}\n        placeholder=\"입력해 주세요.\"\n        className=\"h-max w-full border-b border-black-60 bg-transparent font-bold focus:outline-none\"\n      />\n    </WriteFormRow>\n  );\n});\nexport default WriteTitle;\n",
  "svgr.d.ts": "declare module \"*.svg\" {\n  import { FC, SVGProps } from \"react\";\n  const content: FC<SVGProps<SVGElement>>;\n  export default content;\n}\n\ndeclare module \"*.svg?url\" {\n  const content: any;\n  export default content;\n}\n",
  "tailwind.config.ts": "const createPxEntries = (size: number) => {\n  return {\n    0: '0',\n    ...Array.from(Array(size + 1)).reduce((accumulator, _, i) => {\n      return { ...accumulator, [`${i * 4}`]: `${(i * 4) / 10}rem` };\n    }),\n  };\n};\n\nconst PX_ENTRIES = createPxEntries(100);\n\nconst config = {\n  content: ['./src/hooks/**/*.{ts,tsx}', './src/components/**/*.{ts,tsx}', './src/app/**/*.{ts,tsx}'],\n  theme: {\n    extend: {\n      screens: {\n        max: '500px',\n      },\n      spacing: PX_ENTRIES,\n      borderRadius: {\n        none: '0rem',\n        xs: '0.8rem',\n        sm: '1.2rem',\n        md: '2rem',\n        lg: '3.2rem',\n        xl: '4rem',\n        full: '100rem',\n      },\n      boxShadow: {\n        sm: '0px 6px 12px 2px rgba(0, 0, 0, 0.10)',\n        md: '0px 10px 20px 4px rgba(0, 0, 0, 0.10)',\n        lg: '0px 8px 20px 0px rgba(0, 0, 0, 0.20)',\n        bt: '0px -4px 40px 4px rgba(0, 0, 0, 0.10)',\n      },\n      colors: {\n        black: {\n          0: 'var(--black-0)',\n          20: 'var(--black-20)',\n          40: 'var(--black-40)',\n          60: 'var(--black-60)',\n          80: 'var(--black-80)',\n          100: 'var(--black-100)',\n        },\n        orange: 'var(--orange)',\n        sky: 'var(--sky)',\n      },\n      fontSize: {\n        12: '1.2rem',\n        14: '1.4rem',\n        16: '1.6rem',\n        18: '1.8rem',\n        20: '2.0rem',\n        24: '2.4rem',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' },\n        },\n        slideDown: {\n          '0%': { transform: 'translateY(100%)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' },\n        },\n        slideRight: {\n          '0%': { transform: 'translateX(-100%)', opacity: '0' },\n          '100%': { transform: 'translateX(0)', opacity: '1' },\n        },\n        bell: {\n          '25%': { transform: 'rotate(5deg)' },\n          '75%': { transform: 'rotate(-5deg)' },\n          '100%': { transform: 'rotate(0deg)' },\n        },\n      },\n      animation: {\n        fadeIn: 'fadeIn 0.5s ease-in-out',\n        slideDown: 'slideDown 0.5s ease-in-out',\n        slideRight: 'slideRight 0.5s ease-in-out',\n        bell: 'bell 0.15s ease-in-out 10',\n      },\n    },\n  },\n  plugins: [],\n};\nexport default config;\n"
}
